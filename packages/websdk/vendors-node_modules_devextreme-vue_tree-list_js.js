"use strict";
(this["webpackChunkwebsdk"] = this["webpackChunkwebsdk"] || []).push([["vendors-node_modules_devextreme-vue_tree-list_js"],{

/***/ "../../node_modules/devextreme-vue/tree-list.js":
/*!******************************************************!*\
  !*** ../../node_modules/devextreme-vue/tree-list.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * devextreme-vue
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DxValidationRule = exports.DxTreeListHeaderFilterTexts = exports.DxTreeListHeaderFilter = exports.DxToolbarItem = exports.DxTexts = exports.DxTabPanelOptionsItem = exports.DxTabPanelOptions = exports.DxTabbedItem = exports.DxTab = exports.DxStringLengthRule = exports.DxStateStoring = exports.DxSorting = exports.DxSimpleItem = exports.DxShow = exports.DxSelection = exports.DxSearchPanel = exports.DxScrolling = exports.DxRowDragging = exports.DxRequiredRule = exports.DxRemoteOperations = exports.DxRangeRule = exports.DxPosition = exports.DxPopup = exports.DxPatternRule = exports.DxPaging = exports.DxPager = exports.DxOperationDescriptions = exports.DxOffset = exports.DxNumericRule = exports.DxMy = exports.DxLookup = exports.DxLoadPanel = exports.DxLabel = exports.DxKeyboardNavigation = exports.DxItem = exports.DxHide = exports.DxHeaderFilter = exports.DxGroupOperationDescriptions = exports.DxGroupItem = exports.DxFormItem = exports.DxFormat = exports.DxForm = exports.DxFilterRow = exports.DxFilterPanelTexts = exports.DxFilterPanel = exports.DxFilterOperationDescriptions = exports.DxFilterBuilderPopup = exports.DxFilterBuilder = exports.DxFieldLookup = exports.DxField = exports.DxEmptyItem = exports.DxEmailRule = exports.DxEditingTexts = exports.DxEditing = exports.DxCustomRule = exports.DxCustomOperation = exports.DxCursorOffset = exports.DxCompareRule = exports.DxColumnLookup = exports.DxColumnHeaderFilter = exports.DxColumnFixingTexts = exports.DxColumnFixing = exports.DxColumnChooser = exports.DxColumn = exports.DxCollision = exports.DxColCountByScreen = exports.DxButtonOptions = exports.DxButtonItem = exports.DxButton = exports.DxBoundaryOffset = exports.DxAt = exports.DxAsyncRule = exports.DxAnimation = exports.DxTreeList = void 0;
var tree_list_1 = __webpack_require__(/*! devextreme/ui/tree_list */ "../../node_modules/devextreme/ui/tree_list.js");
var index_1 = __webpack_require__(/*! ./core/index */ "../../node_modules/devextreme-vue/core/index.js");
var index_2 = __webpack_require__(/*! ./core/index */ "../../node_modules/devextreme-vue/core/index.js");
var DxTreeList = index_1.createComponent({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowColumnReordering: Boolean,
        allowColumnResizing: Boolean,
        autoExpandAll: Boolean,
        autoNavigateToFocusedRow: Boolean,
        cacheEnabled: Boolean,
        cellHintEnabled: Boolean,
        columnAutoWidth: Boolean,
        columnChooser: Object,
        columnFixing: Object,
        columnHidingEnabled: Boolean,
        columnMinWidth: Number,
        columnResizingMode: String,
        columns: Array,
        columnWidth: Number,
        customizeColumns: Function,
        dataSource: [Array, Object, String],
        dataStructure: String,
        dateSerializationFormat: String,
        disabled: Boolean,
        editing: Object,
        elementAttr: Object,
        errorRowEnabled: Boolean,
        expandedRowKeys: Array,
        expandNodesOnFiltering: Boolean,
        filterBuilder: Object,
        filterBuilderPopup: Object,
        filterMode: String,
        filterPanel: Object,
        filterRow: Object,
        filterSyncEnabled: [Boolean, String],
        filterValue: [Array, Function, String],
        focusedColumnIndex: Number,
        focusedRowEnabled: Boolean,
        focusedRowIndex: Number,
        focusedRowKey: {},
        focusStateEnabled: Boolean,
        hasItemsExpr: [Function, String],
        headerFilter: Object,
        height: [Function, Number, String],
        highlightChanges: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        itemsExpr: [Function, String],
        keyboardNavigation: Object,
        keyExpr: [Function, String],
        loadPanel: Object,
        noDataText: String,
        onAdaptiveDetailRowPreparing: Function,
        onCellClick: [Function, String],
        onCellDblClick: Function,
        onCellHoverChanged: Function,
        onCellPrepared: Function,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDataErrorOccurred: Function,
        onDisposing: Function,
        onEditCanceled: Function,
        onEditCanceling: Function,
        onEditingStart: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onFocusedCellChanged: Function,
        onFocusedCellChanging: Function,
        onFocusedRowChanged: Function,
        onFocusedRowChanging: Function,
        onInitialized: Function,
        onInitNewRow: Function,
        onKeyDown: Function,
        onNodesInitialized: Function,
        onOptionChanged: Function,
        onRowClick: [Function, String],
        onRowCollapsed: Function,
        onRowCollapsing: Function,
        onRowDblClick: Function,
        onRowExpanded: Function,
        onRowExpanding: Function,
        onRowInserted: Function,
        onRowInserting: Function,
        onRowPrepared: Function,
        onRowRemoved: Function,
        onRowRemoving: Function,
        onRowUpdated: Function,
        onRowUpdating: Function,
        onRowValidating: Function,
        onSaved: Function,
        onSaving: Function,
        onSelectionChanged: Function,
        onToolbarPreparing: Function,
        pager: Object,
        paging: Object,
        parentIdExpr: [Function, String],
        remoteOperations: [Object, String],
        renderAsync: Boolean,
        repaintChangesOnly: Boolean,
        rootValue: {},
        rowAlternationEnabled: Boolean,
        rowDragging: Object,
        rtlEnabled: Boolean,
        scrolling: Object,
        searchPanel: Object,
        selectedRowKeys: Array,
        selection: Object,
        showBorders: Boolean,
        showColumnHeaders: Boolean,
        showColumnLines: Boolean,
        showRowLines: Boolean,
        sorting: Object,
        stateStoring: Object,
        tabIndex: Number,
        twoWayBindingEnabled: Boolean,
        visible: Boolean,
        width: [Function, Number, String],
        wordWrapEnabled: Boolean
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowColumnReordering": null,
        "update:allowColumnResizing": null,
        "update:autoExpandAll": null,
        "update:autoNavigateToFocusedRow": null,
        "update:cacheEnabled": null,
        "update:cellHintEnabled": null,
        "update:columnAutoWidth": null,
        "update:columnChooser": null,
        "update:columnFixing": null,
        "update:columnHidingEnabled": null,
        "update:columnMinWidth": null,
        "update:columnResizingMode": null,
        "update:columns": null,
        "update:columnWidth": null,
        "update:customizeColumns": null,
        "update:dataSource": null,
        "update:dataStructure": null,
        "update:dateSerializationFormat": null,
        "update:disabled": null,
        "update:editing": null,
        "update:elementAttr": null,
        "update:errorRowEnabled": null,
        "update:expandedRowKeys": null,
        "update:expandNodesOnFiltering": null,
        "update:filterBuilder": null,
        "update:filterBuilderPopup": null,
        "update:filterMode": null,
        "update:filterPanel": null,
        "update:filterRow": null,
        "update:filterSyncEnabled": null,
        "update:filterValue": null,
        "update:focusedColumnIndex": null,
        "update:focusedRowEnabled": null,
        "update:focusedRowIndex": null,
        "update:focusedRowKey": null,
        "update:focusStateEnabled": null,
        "update:hasItemsExpr": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:highlightChanges": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:itemsExpr": null,
        "update:keyboardNavigation": null,
        "update:keyExpr": null,
        "update:loadPanel": null,
        "update:noDataText": null,
        "update:onAdaptiveDetailRowPreparing": null,
        "update:onCellClick": null,
        "update:onCellDblClick": null,
        "update:onCellHoverChanged": null,
        "update:onCellPrepared": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDataErrorOccurred": null,
        "update:onDisposing": null,
        "update:onEditCanceled": null,
        "update:onEditCanceling": null,
        "update:onEditingStart": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onFocusedCellChanged": null,
        "update:onFocusedCellChanging": null,
        "update:onFocusedRowChanged": null,
        "update:onFocusedRowChanging": null,
        "update:onInitialized": null,
        "update:onInitNewRow": null,
        "update:onKeyDown": null,
        "update:onNodesInitialized": null,
        "update:onOptionChanged": null,
        "update:onRowClick": null,
        "update:onRowCollapsed": null,
        "update:onRowCollapsing": null,
        "update:onRowDblClick": null,
        "update:onRowExpanded": null,
        "update:onRowExpanding": null,
        "update:onRowInserted": null,
        "update:onRowInserting": null,
        "update:onRowPrepared": null,
        "update:onRowRemoved": null,
        "update:onRowRemoving": null,
        "update:onRowUpdated": null,
        "update:onRowUpdating": null,
        "update:onRowValidating": null,
        "update:onSaved": null,
        "update:onSaving": null,
        "update:onSelectionChanged": null,
        "update:onToolbarPreparing": null,
        "update:pager": null,
        "update:paging": null,
        "update:parentIdExpr": null,
        "update:remoteOperations": null,
        "update:renderAsync": null,
        "update:repaintChangesOnly": null,
        "update:rootValue": null,
        "update:rowAlternationEnabled": null,
        "update:rowDragging": null,
        "update:rtlEnabled": null,
        "update:scrolling": null,
        "update:searchPanel": null,
        "update:selectedRowKeys": null,
        "update:selection": null,
        "update:showBorders": null,
        "update:showColumnHeaders": null,
        "update:showColumnLines": null,
        "update:showRowLines": null,
        "update:sorting": null,
        "update:stateStoring": null,
        "update:tabIndex": null,
        "update:twoWayBindingEnabled": null,
        "update:visible": null,
        "update:width": null,
        "update:wordWrapEnabled": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = tree_list_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            column: { isCollectionItem: true, optionName: "columns" },
            columnChooser: { isCollectionItem: false, optionName: "columnChooser" },
            columnFixing: { isCollectionItem: false, optionName: "columnFixing" },
            editing: { isCollectionItem: false, optionName: "editing" },
            filterBuilder: { isCollectionItem: false, optionName: "filterBuilder" },
            filterBuilderPopup: { isCollectionItem: false, optionName: "filterBuilderPopup" },
            filterPanel: { isCollectionItem: false, optionName: "filterPanel" },
            filterRow: { isCollectionItem: false, optionName: "filterRow" },
            headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
            keyboardNavigation: { isCollectionItem: false, optionName: "keyboardNavigation" },
            loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
            pager: { isCollectionItem: false, optionName: "pager" },
            paging: { isCollectionItem: false, optionName: "paging" },
            remoteOperations: { isCollectionItem: false, optionName: "remoteOperations" },
            rowDragging: { isCollectionItem: false, optionName: "rowDragging" },
            scrolling: { isCollectionItem: false, optionName: "scrolling" },
            searchPanel: { isCollectionItem: false, optionName: "searchPanel" },
            selection: { isCollectionItem: false, optionName: "selection" },
            sorting: { isCollectionItem: false, optionName: "sorting" },
            stateStoring: { isCollectionItem: false, optionName: "stateStoring" },
            treeListHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" }
        };
    }
});
exports.DxTreeList = DxTreeList;
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: Object,
        show: Object
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
var DxAsyncRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxAsyncRule = DxAsyncRule;
DxAsyncRule.$_optionName = "validationRules";
DxAsyncRule.$_isCollectionItem = true;
DxAsyncRule.$_predefinedProps = {
    type: "async"
};
var DxAt = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxAt = DxAt;
DxAt.$_optionName = "at";
var DxBoundaryOffset = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
exports.DxBoundaryOffset = DxBoundaryOffset;
DxBoundaryOffset.$_optionName = "boundaryOffset";
var DxButton = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:hint": null,
        "update:icon": null,
        "update:name": null,
        "update:onClick": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        cssClass: String,
        hint: String,
        icon: String,
        name: String,
        onClick: [Function, String],
        template: {},
        text: String,
        visible: [Boolean, Function]
    }
});
exports.DxButton = DxButton;
DxButton.$_optionName = "buttons";
DxButton.$_isCollectionItem = true;
var DxButtonItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:buttonOptions": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:horizontalAlignment": null,
        "update:itemType": null,
        "update:name": null,
        "update:verticalAlignment": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        buttonOptions: Object,
        colSpan: Number,
        cssClass: String,
        horizontalAlignment: String,
        itemType: String,
        name: String,
        verticalAlignment: String,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxButtonItem = DxButtonItem;
DxButtonItem.$_optionName = "items";
DxButtonItem.$_isCollectionItem = true;
DxButtonItem.$_predefinedProps = {
    itemType: "button"
};
DxButtonItem.$_expectedChildren = {
    buttonOptions: { isCollectionItem: false, optionName: "buttonOptions" }
};
var DxButtonOptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:bindingOptions": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:icon": null,
        "update:onClick": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:rtlEnabled": null,
        "update:stylingMode": null,
        "update:tabIndex": null,
        "update:template": null,
        "update:text": null,
        "update:type": null,
        "update:useSubmitBehavior": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        bindingOptions: Object,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        icon: String,
        onClick: Function,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        stylingMode: String,
        tabIndex: Number,
        template: {},
        text: String,
        type: String,
        useSubmitBehavior: Boolean,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxButtonOptions = DxButtonOptions;
DxButtonOptions.$_optionName = "buttonOptions";
var DxColCountByScreen = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:lg": null,
        "update:md": null,
        "update:sm": null,
        "update:xs": null,
    },
    props: {
        lg: Number,
        md: Number,
        sm: Number,
        xs: Number
    }
});
exports.DxColCountByScreen = DxColCountByScreen;
DxColCountByScreen.$_optionName = "colCountByScreen";
var DxCollision = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxCollision = DxCollision;
DxCollision.$_optionName = "collision";
var DxColumn = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:allowEditing": null,
        "update:allowFiltering": null,
        "update:allowFixing": null,
        "update:allowHeaderFiltering": null,
        "update:allowHiding": null,
        "update:allowReordering": null,
        "update:allowResizing": null,
        "update:allowSearch": null,
        "update:allowSorting": null,
        "update:buttons": null,
        "update:calculateCellValue": null,
        "update:calculateDisplayValue": null,
        "update:calculateFilterExpression": null,
        "update:calculateSortValue": null,
        "update:caption": null,
        "update:cellTemplate": null,
        "update:columns": null,
        "update:cssClass": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:editCellTemplate": null,
        "update:editorOptions": null,
        "update:encodeHtml": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:filterType": null,
        "update:filterValue": null,
        "update:filterValues": null,
        "update:fixed": null,
        "update:fixedPosition": null,
        "update:format": null,
        "update:formItem": null,
        "update:headerCellTemplate": null,
        "update:headerFilter": null,
        "update:hidingPriority": null,
        "update:isBand": null,
        "update:lookup": null,
        "update:minWidth": null,
        "update:name": null,
        "update:ownerBand": null,
        "update:renderAsync": null,
        "update:selectedFilterOperation": null,
        "update:setCellValue": null,
        "update:showEditorAlways": null,
        "update:showInColumnChooser": null,
        "update:sortIndex": null,
        "update:sortingMethod": null,
        "update:sortOrder": null,
        "update:trueText": null,
        "update:type": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
        "update:width": null,
    },
    props: {
        alignment: String,
        allowEditing: Boolean,
        allowFiltering: Boolean,
        allowFixing: Boolean,
        allowHeaderFiltering: Boolean,
        allowHiding: Boolean,
        allowReordering: Boolean,
        allowResizing: Boolean,
        allowSearch: Boolean,
        allowSorting: Boolean,
        buttons: Array,
        calculateCellValue: Function,
        calculateDisplayValue: [Function, String],
        calculateFilterExpression: Function,
        calculateSortValue: [Function, String],
        caption: String,
        cellTemplate: {},
        columns: Array,
        cssClass: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        editCellTemplate: {},
        editorOptions: Object,
        encodeHtml: Boolean,
        falseText: String,
        filterOperations: Array,
        filterType: String,
        filterValue: {},
        filterValues: Array,
        fixed: Boolean,
        fixedPosition: String,
        format: [Object, Function, String],
        formItem: Object,
        headerCellTemplate: {},
        headerFilter: Object,
        hidingPriority: Number,
        isBand: Boolean,
        lookup: Object,
        minWidth: Number,
        name: String,
        ownerBand: Number,
        renderAsync: Boolean,
        selectedFilterOperation: String,
        setCellValue: Function,
        showEditorAlways: Boolean,
        showInColumnChooser: Boolean,
        sortIndex: Number,
        sortingMethod: Function,
        sortOrder: String,
        trueText: String,
        type: String,
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number,
        width: [Number, String]
    }
});
exports.DxColumn = DxColumn;
DxColumn.$_optionName = "columns";
DxColumn.$_isCollectionItem = true;
DxColumn.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    button: { isCollectionItem: true, optionName: "buttons" },
    columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
    columnLookup: { isCollectionItem: false, optionName: "lookup" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    format: { isCollectionItem: false, optionName: "format" },
    formItem: { isCollectionItem: false, optionName: "formItem" },
    headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
    lookup: { isCollectionItem: false, optionName: "lookup" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
var DxColumnChooser = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:emptyPanelText": null,
        "update:enabled": null,
        "update:height": null,
        "update:mode": null,
        "update:searchTimeout": null,
        "update:title": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        emptyPanelText: String,
        enabled: Boolean,
        height: Number,
        mode: String,
        searchTimeout: Number,
        title: String,
        width: Number
    }
});
exports.DxColumnChooser = DxColumnChooser;
DxColumnChooser.$_optionName = "columnChooser";
var DxColumnFixing = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:texts": null,
    },
    props: {
        enabled: Boolean,
        texts: Object
    }
});
exports.DxColumnFixing = DxColumnFixing;
DxColumnFixing.$_optionName = "columnFixing";
DxColumnFixing.$_expectedChildren = {
    columnFixingTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxColumnFixingTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:fix": null,
        "update:leftPosition": null,
        "update:rightPosition": null,
        "update:unfix": null,
    },
    props: {
        fix: String,
        leftPosition: String,
        rightPosition: String,
        unfix: String
    }
});
exports.DxColumnFixingTexts = DxColumnFixingTexts;
DxColumnFixingTexts.$_optionName = "texts";
var DxColumnHeaderFilter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        width: Number
    }
});
exports.DxColumnHeaderFilter = DxColumnHeaderFilter;
DxColumnHeaderFilter.$_optionName = "headerFilter";
var DxColumnLookup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null,
    },
    props: {
        allowClearing: Boolean,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
    }
});
exports.DxColumnLookup = DxColumnLookup;
DxColumnLookup.$_optionName = "lookup";
var DxCompareRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxCompareRule = DxCompareRule;
DxCompareRule.$_optionName = "validationRules";
DxCompareRule.$_isCollectionItem = true;
DxCompareRule.$_predefinedProps = {
    type: "compare"
};
var DxCursorOffset = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
exports.DxCursorOffset = DxCursorOffset;
DxCursorOffset.$_optionName = "cursorOffset";
var DxCustomOperation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataTypes": null,
        "update:editorTemplate": null,
        "update:hasValue": null,
        "update:icon": null,
        "update:name": null,
    },
    props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataTypes: Array,
        editorTemplate: {},
        hasValue: Boolean,
        icon: String,
        name: String
    }
});
exports.DxCustomOperation = DxCustomOperation;
DxCustomOperation.$_optionName = "customOperations";
DxCustomOperation.$_isCollectionItem = true;
var DxCustomRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxCustomRule = DxCustomRule;
DxCustomRule.$_optionName = "validationRules";
DxCustomRule.$_isCollectionItem = true;
DxCustomRule.$_predefinedProps = {
    type: "custom"
};
var DxEditing = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowAdding": null,
        "update:allowDeleting": null,
        "update:allowUpdating": null,
        "update:changes": null,
        "update:confirmDelete": null,
        "update:editColumnName": null,
        "update:editRowKey": null,
        "update:form": null,
        "update:mode": null,
        "update:popup": null,
        "update:refreshMode": null,
        "update:selectTextOnEditStart": null,
        "update:startEditAction": null,
        "update:texts": null,
        "update:useIcons": null,
    },
    props: {
        allowAdding: [Boolean, Function],
        allowDeleting: [Boolean, Function],
        allowUpdating: [Boolean, Function],
        changes: Array,
        confirmDelete: Boolean,
        editColumnName: String,
        editRowKey: {},
        form: Object,
        mode: String,
        popup: Object,
        refreshMode: String,
        selectTextOnEditStart: Boolean,
        startEditAction: String,
        texts: Object,
        useIcons: Boolean
    }
});
exports.DxEditing = DxEditing;
DxEditing.$_optionName = "editing";
DxEditing.$_expectedChildren = {
    editingTexts: { isCollectionItem: false, optionName: "texts" },
    form: { isCollectionItem: false, optionName: "form" },
    popup: { isCollectionItem: false, optionName: "popup" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxEditingTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:addRowToNode": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:undeleteRow": null,
        "update:validationCancelChanges": null,
    },
    props: {
        addRow: String,
        addRowToNode: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        deleteRow: String,
        editRow: String,
        saveAllChanges: String,
        saveRowChanges: String,
        undeleteRow: String,
        validationCancelChanges: String
    }
});
exports.DxEditingTexts = DxEditingTexts;
DxEditingTexts.$_optionName = "texts";
var DxEmailRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxEmailRule = DxEmailRule;
DxEmailRule.$_optionName = "validationRules";
DxEmailRule.$_isCollectionItem = true;
DxEmailRule.$_predefinedProps = {
    type: "email"
};
var DxEmptyItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:itemType": null,
        "update:name": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        itemType: String,
        name: String,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxEmptyItem = DxEmptyItem;
DxEmptyItem.$_optionName = "items";
DxEmptyItem.$_isCollectionItem = true;
DxEmptyItem.$_predefinedProps = {
    itemType: "empty"
};
var DxField = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:defaultFilterOperation": null,
        "update:editorOptions": null,
        "update:editorTemplate": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:format": null,
        "update:lookup": null,
        "update:name": null,
        "update:trueText": null,
    },
    props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        defaultFilterOperation: String,
        editorOptions: Object,
        editorTemplate: {},
        falseText: String,
        filterOperations: Array,
        format: [Object, Function, String],
        lookup: Object,
        name: String,
        trueText: String
    }
});
exports.DxField = DxField;
DxField.$_optionName = "fields";
DxField.$_isCollectionItem = true;
DxField.$_expectedChildren = {
    fieldLookup: { isCollectionItem: false, optionName: "lookup" },
    format: { isCollectionItem: false, optionName: "format" },
    lookup: { isCollectionItem: false, optionName: "lookup" }
};
var DxFieldLookup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null,
    },
    props: {
        allowClearing: Boolean,
        dataSource: [Array, Object],
        displayExpr: [Function, String],
        valueExpr: [Function, String]
    }
});
exports.DxFieldLookup = DxFieldLookup;
DxFieldLookup.$_optionName = "lookup";
var DxFilterBuilder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowHierarchicalFields": null,
        "update:bindingOptions": null,
        "update:customOperations": null,
        "update:defaultGroupOperation": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:fields": null,
        "update:filterOperationDescriptions": null,
        "update:focusStateEnabled": null,
        "update:groupOperationDescriptions": null,
        "update:groupOperations": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxGroupLevel": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:rtlEnabled": null,
        "update:tabIndex": null,
        "update:value": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowHierarchicalFields: Boolean,
        bindingOptions: Object,
        customOperations: Array,
        defaultGroupOperation: String,
        disabled: Boolean,
        elementAttr: Object,
        fields: Array,
        filterOperationDescriptions: Object,
        focusStateEnabled: Boolean,
        groupOperationDescriptions: Object,
        groupOperations: Array,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxGroupLevel: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        rtlEnabled: Boolean,
        tabIndex: Number,
        value: [Array, Function, String],
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxFilterBuilder = DxFilterBuilder;
DxFilterBuilder.$_optionName = "filterBuilder";
DxFilterBuilder.$_expectedChildren = {
    customOperation: { isCollectionItem: true, optionName: "customOperations" },
    field: { isCollectionItem: true, optionName: "fields" },
    filterOperationDescriptions: { isCollectionItem: false, optionName: "filterOperationDescriptions" },
    groupOperationDescriptions: { isCollectionItem: false, optionName: "groupOperationDescriptions" }
};
var DxFilterBuilderPopup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: Object,
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxFilterBuilderPopup = DxFilterBuilderPopup;
DxFilterBuilderPopup.$_optionName = "filterBuilderPopup";
var DxFilterOperationDescriptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:isBlank": null,
        "update:isNotBlank": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null,
    },
    props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        isBlank: String,
        isNotBlank: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
    }
});
exports.DxFilterOperationDescriptions = DxFilterOperationDescriptions;
DxFilterOperationDescriptions.$_optionName = "filterOperationDescriptions";
var DxFilterPanel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:filterEnabled": null,
        "update:texts": null,
        "update:visible": null,
    },
    props: {
        customizeText: Function,
        filterEnabled: Boolean,
        texts: Object,
        visible: Boolean
    }
});
exports.DxFilterPanel = DxFilterPanel;
DxFilterPanel.$_optionName = "filterPanel";
DxFilterPanel.$_expectedChildren = {
    filterPanelTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxFilterPanelTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:clearFilter": null,
        "update:createFilter": null,
        "update:filterEnabledHint": null,
    },
    props: {
        clearFilter: String,
        createFilter: String,
        filterEnabledHint: String
    }
});
exports.DxFilterPanelTexts = DxFilterPanelTexts;
DxFilterPanelTexts.$_optionName = "texts";
var DxFilterRow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:applyFilter": null,
        "update:applyFilterText": null,
        "update:betweenEndText": null,
        "update:betweenStartText": null,
        "update:operationDescriptions": null,
        "update:resetOperationText": null,
        "update:showAllText": null,
        "update:showOperationChooser": null,
        "update:visible": null,
    },
    props: {
        applyFilter: String,
        applyFilterText: String,
        betweenEndText: String,
        betweenStartText: String,
        operationDescriptions: Object,
        resetOperationText: String,
        showAllText: String,
        showOperationChooser: Boolean,
        visible: Boolean
    }
});
exports.DxFilterRow = DxFilterRow;
DxFilterRow.$_optionName = "filterRow";
DxFilterRow.$_expectedChildren = {
    operationDescriptions: { isCollectionItem: false, optionName: "operationDescriptions" }
};
var DxForm = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:alignItemLabels": null,
        "update:alignItemLabelsInAllGroups": null,
        "update:bindingOptions": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:customizeItem": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:formData": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:items": null,
        "update:labelLocation": null,
        "update:minColWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorEnterKey": null,
        "update:onFieldDataChanged": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:optionalMark": null,
        "update:readOnly": null,
        "update:requiredMark": null,
        "update:requiredMessage": null,
        "update:rtlEnabled": null,
        "update:screenByWidth": null,
        "update:scrollingEnabled": null,
        "update:showColonAfterLabel": null,
        "update:showOptionalMark": null,
        "update:showRequiredMark": null,
        "update:showValidationSummary": null,
        "update:tabIndex": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        alignItemLabels: Boolean,
        alignItemLabelsInAllGroups: Boolean,
        bindingOptions: Object,
        colCount: [Number, String],
        colCountByScreen: Object,
        customizeItem: Function,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        formData: Object,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        items: Array,
        labelLocation: String,
        minColWidth: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorEnterKey: Function,
        onFieldDataChanged: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        optionalMark: String,
        readOnly: Boolean,
        requiredMark: String,
        requiredMessage: String,
        rtlEnabled: Boolean,
        screenByWidth: Function,
        scrollingEnabled: Boolean,
        showColonAfterLabel: Boolean,
        showOptionalMark: Boolean,
        showRequiredMark: Boolean,
        showValidationSummary: Boolean,
        tabIndex: Number,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxForm = DxForm;
DxForm.$_optionName = "form";
DxForm.$_expectedChildren = {
    ButtonItem: { isCollectionItem: true, optionName: "items" },
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" },
    EmptyItem: { isCollectionItem: true, optionName: "items" },
    GroupItem: { isCollectionItem: true, optionName: "items" },
    item: { isCollectionItem: true, optionName: "items" },
    SimpleItem: { isCollectionItem: true, optionName: "items" },
    TabbedItem: { isCollectionItem: true, optionName: "items" }
};
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxFormItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: Object,
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxFormItem = DxFormItem;
DxFormItem.$_optionName = "formItem";
DxFormItem.$_expectedChildren = {
    AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
    CompareRule: { isCollectionItem: true, optionName: "validationRules" },
    CustomRule: { isCollectionItem: true, optionName: "validationRules" },
    EmailRule: { isCollectionItem: true, optionName: "validationRules" },
    label: { isCollectionItem: false, optionName: "label" },
    NumericRule: { isCollectionItem: true, optionName: "validationRules" },
    PatternRule: { isCollectionItem: true, optionName: "validationRules" },
    RangeRule: { isCollectionItem: true, optionName: "validationRules" },
    RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
    StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
    validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
var DxGroupItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:caption": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:items": null,
        "update:itemType": null,
        "update:name": null,
        "update:template": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        alignItemLabels: Boolean,
        caption: String,
        colCount: Number,
        colCountByScreen: Object,
        colSpan: Number,
        cssClass: String,
        items: Array,
        itemType: String,
        name: String,
        template: {},
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxGroupItem = DxGroupItem;
DxGroupItem.$_optionName = "items";
DxGroupItem.$_isCollectionItem = true;
DxGroupItem.$_predefinedProps = {
    itemType: "group"
};
DxGroupItem.$_expectedChildren = {
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
};
var DxGroupOperationDescriptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:and": null,
        "update:notAnd": null,
        "update:notOr": null,
        "update:or": null,
    },
    props: {
        and: String,
        notAnd: String,
        notOr: String,
        or: String
    }
});
exports.DxGroupOperationDescriptions = DxGroupOperationDescriptions;
DxGroupOperationDescriptions.$_optionName = "groupOperationDescriptions";
var DxHeaderFilter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
    }
});
exports.DxHeaderFilter = DxHeaderFilter;
DxHeaderFilter.$_optionName = "headerFilter";
var DxHide = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: [Number, Object, String],
        staggerDelay: Number,
        start: Function,
        to: [Number, Object, String],
        type: String
    }
});
exports.DxHide = DxHide;
DxHide.$_optionName = "hide";
var DxItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:badge": null,
        "update:buttonOptions": null,
        "update:caption": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:disabled": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:horizontalAlignment": null,
        "update:html": null,
        "update:icon": null,
        "update:isRequired": null,
        "update:items": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:tabPanelOptions": null,
        "update:tabs": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:text": null,
        "update:title": null,
        "update:validationRules": null,
        "update:verticalAlignment": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        alignItemLabels: Boolean,
        badge: String,
        buttonOptions: Object,
        caption: String,
        colCount: Number,
        colCountByScreen: Object,
        colSpan: Number,
        cssClass: String,
        dataField: String,
        disabled: Boolean,
        editorOptions: Object,
        editorType: String,
        helpText: String,
        horizontalAlignment: String,
        html: String,
        icon: String,
        isRequired: Boolean,
        items: Array,
        itemType: String,
        label: Object,
        name: String,
        tabPanelOptions: Object,
        tabs: Array,
        tabTemplate: {},
        template: {},
        text: String,
        title: String,
        validationRules: Array,
        verticalAlignment: String,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxKeyboardNavigation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editOnKeyPress": null,
        "update:enabled": null,
        "update:enterKeyAction": null,
        "update:enterKeyDirection": null,
    },
    props: {
        editOnKeyPress: Boolean,
        enabled: Boolean,
        enterKeyAction: String,
        enterKeyDirection: String
    }
});
exports.DxKeyboardNavigation = DxKeyboardNavigation;
DxKeyboardNavigation.$_optionName = "keyboardNavigation";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:location": null,
        "update:showColon": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        location: String,
        showColon: Boolean,
        text: String,
        visible: Boolean
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
var DxLoadPanel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:height": null,
        "update:indicatorSrc": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:text": null,
        "update:width": null,
    },
    props: {
        enabled: [Boolean, String],
        height: Number,
        indicatorSrc: String,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        text: String,
        width: Number
    }
});
exports.DxLoadPanel = DxLoadPanel;
DxLoadPanel.$_optionName = "loadPanel";
var DxLookup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null,
    },
    props: {
        allowClearing: Boolean,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
    }
});
exports.DxLookup = DxLookup;
DxLookup.$_optionName = "lookup";
var DxMy = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxMy = DxMy;
DxMy.$_optionName = "my";
var DxNumericRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxNumericRule = DxNumericRule;
DxNumericRule.$_optionName = "validationRules";
DxNumericRule.$_isCollectionItem = true;
DxNumericRule.$_predefinedProps = {
    type: "numeric"
};
var DxOffset = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
exports.DxOffset = DxOffset;
DxOffset.$_optionName = "offset";
var DxOperationDescriptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null,
    },
    props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
    }
});
exports.DxOperationDescriptions = DxOperationDescriptions;
DxOperationDescriptions.$_optionName = "operationDescriptions";
var DxPager = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowedPageSizes": null,
        "update:infoText": null,
        "update:showInfo": null,
        "update:showNavigationButtons": null,
        "update:showPageSizeSelector": null,
        "update:visible": null,
    },
    props: {
        allowedPageSizes: [Array, String],
        infoText: String,
        showInfo: Boolean,
        showNavigationButtons: Boolean,
        showPageSizeSelector: Boolean,
        visible: [Boolean, String]
    }
});
exports.DxPager = DxPager;
DxPager.$_optionName = "pager";
var DxPaging = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:pageIndex": null,
        "update:pageSize": null,
    },
    props: {
        enabled: Boolean,
        pageIndex: Number,
        pageSize: Number
    }
});
exports.DxPaging = DxPaging;
DxPaging.$_optionName = "paging";
var DxPatternRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:pattern": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        pattern: {},
        type: String
    }
});
exports.DxPatternRule = DxPatternRule;
DxPatternRule.$_optionName = "validationRules";
DxPatternRule.$_isCollectionItem = true;
DxPatternRule.$_predefinedProps = {
    type: "pattern"
};
var DxPopup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: Object,
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxPopup = DxPopup;
DxPopup.$_optionName = "popup";
DxPopup.$_expectedChildren = {
    animation: { isCollectionItem: false, optionName: "animation" },
    position: { isCollectionItem: false, optionName: "position" },
    toolbarItem: { isCollectionItem: true, optionName: "toolbarItems" }
};
var DxPosition = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [Object, String],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
});
exports.DxPosition = DxPosition;
DxPosition.$_optionName = "position";
DxPosition.$_expectedChildren = {
    at: { isCollectionItem: false, optionName: "at" },
    boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
    collision: { isCollectionItem: false, optionName: "collision" },
    my: { isCollectionItem: false, optionName: "my" },
    offset: { isCollectionItem: false, optionName: "offset" }
};
var DxRangeRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:reevaluate": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        reevaluate: Boolean,
        type: String
    }
});
exports.DxRangeRule = DxRangeRule;
DxRangeRule.$_optionName = "validationRules";
DxRangeRule.$_isCollectionItem = true;
DxRangeRule.$_predefinedProps = {
    type: "range"
};
var DxRemoteOperations = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:filtering": null,
        "update:grouping": null,
        "update:sorting": null,
    },
    props: {
        filtering: Boolean,
        grouping: Boolean,
        sorting: Boolean
    }
});
exports.DxRemoteOperations = DxRemoteOperations;
DxRemoteOperations.$_optionName = "remoteOperations";
var DxRequiredRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:message": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        message: String,
        trim: Boolean,
        type: String
    }
});
exports.DxRequiredRule = DxRequiredRule;
DxRequiredRule.$_optionName = "validationRules";
DxRequiredRule.$_isCollectionItem = true;
DxRequiredRule.$_predefinedProps = {
    type: "required"
};
var DxRowDragging = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDropInsideItem": null,
        "update:allowReordering": null,
        "update:autoScroll": null,
        "update:boundary": null,
        "update:container": null,
        "update:cursorOffset": null,
        "update:data": null,
        "update:dragDirection": null,
        "update:dragTemplate": null,
        "update:dropFeedbackMode": null,
        "update:filter": null,
        "update:group": null,
        "update:handle": null,
        "update:onAdd": null,
        "update:onDragChange": null,
        "update:onDragEnd": null,
        "update:onDragMove": null,
        "update:onDragStart": null,
        "update:onRemove": null,
        "update:onReorder": null,
        "update:scrollSensitivity": null,
        "update:scrollSpeed": null,
        "update:showDragIcons": null,
    },
    props: {
        allowDropInsideItem: Boolean,
        allowReordering: Boolean,
        autoScroll: Boolean,
        boundary: {},
        container: {},
        cursorOffset: [Object, String],
        data: {},
        dragDirection: String,
        dragTemplate: {},
        dropFeedbackMode: String,
        filter: String,
        group: String,
        handle: String,
        onAdd: Function,
        onDragChange: Function,
        onDragEnd: Function,
        onDragMove: Function,
        onDragStart: Function,
        onRemove: Function,
        onReorder: Function,
        scrollSensitivity: Number,
        scrollSpeed: Number,
        showDragIcons: Boolean
    }
});
exports.DxRowDragging = DxRowDragging;
DxRowDragging.$_optionName = "rowDragging";
DxRowDragging.$_expectedChildren = {
    cursorOffset: { isCollectionItem: false, optionName: "cursorOffset" }
};
var DxScrolling = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:columnRenderingMode": null,
        "update:mode": null,
        "update:preloadEnabled": null,
        "update:rowRenderingMode": null,
        "update:scrollByContent": null,
        "update:scrollByThumb": null,
        "update:showScrollbar": null,
        "update:useNative": null,
    },
    props: {
        columnRenderingMode: String,
        mode: String,
        preloadEnabled: Boolean,
        rowRenderingMode: String,
        scrollByContent: Boolean,
        scrollByThumb: Boolean,
        showScrollbar: String,
        useNative: [Boolean, String]
    }
});
exports.DxScrolling = DxScrolling;
DxScrolling.$_optionName = "scrolling";
var DxSearchPanel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:highlightCaseSensitive": null,
        "update:highlightSearchText": null,
        "update:placeholder": null,
        "update:searchVisibleColumnsOnly": null,
        "update:text": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        highlightCaseSensitive: Boolean,
        highlightSearchText: Boolean,
        placeholder: String,
        searchVisibleColumnsOnly: Boolean,
        text: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSearchPanel = DxSearchPanel;
DxSearchPanel.$_optionName = "searchPanel";
var DxSelection = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:mode": null,
        "update:recursive": null,
    },
    props: {
        allowSelectAll: Boolean,
        mode: String,
        recursive: Boolean
    }
});
exports.DxSelection = DxSelection;
DxSelection.$_optionName = "selection";
var DxShow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: [Number, Object, String],
        staggerDelay: Number,
        start: Function,
        to: [Number, Object, String],
        type: String
    }
});
exports.DxShow = DxShow;
DxShow.$_optionName = "show";
var DxSimpleItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: Object,
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxSimpleItem = DxSimpleItem;
DxSimpleItem.$_optionName = "items";
DxSimpleItem.$_isCollectionItem = true;
DxSimpleItem.$_predefinedProps = {
    itemType: "simple"
};
var DxSorting = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ascendingText": null,
        "update:clearText": null,
        "update:descendingText": null,
        "update:mode": null,
        "update:showSortIndexes": null,
    },
    props: {
        ascendingText: String,
        clearText: String,
        descendingText: String,
        mode: String,
        showSortIndexes: Boolean
    }
});
exports.DxSorting = DxSorting;
DxSorting.$_optionName = "sorting";
var DxStateStoring = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customLoad": null,
        "update:customSave": null,
        "update:enabled": null,
        "update:savingTimeout": null,
        "update:storageKey": null,
        "update:type": null,
    },
    props: {
        customLoad: Function,
        customSave: Function,
        enabled: Boolean,
        savingTimeout: Number,
        storageKey: String,
        type: String
    }
});
exports.DxStateStoring = DxStateStoring;
DxStateStoring.$_optionName = "stateStoring";
var DxStringLengthRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: Number,
        message: String,
        min: Number,
        trim: Boolean,
        type: String
    }
});
exports.DxStringLengthRule = DxStringLengthRule;
DxStringLengthRule.$_optionName = "validationRules";
DxStringLengthRule.$_isCollectionItem = true;
DxStringLengthRule.$_predefinedProps = {
    type: "stringLength"
};
var DxTab = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignItemLabels": null,
        "update:badge": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:disabled": null,
        "update:icon": null,
        "update:items": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:title": null,
    },
    props: {
        alignItemLabels: Boolean,
        badge: String,
        colCount: Number,
        colCountByScreen: Object,
        disabled: Boolean,
        icon: String,
        items: Array,
        tabTemplate: {},
        template: {},
        title: String
    }
});
exports.DxTab = DxTab;
DxTab.$_optionName = "tabs";
DxTab.$_isCollectionItem = true;
DxTab.$_expectedChildren = {
    colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
};
var DxTabbedItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:itemType": null,
        "update:name": null,
        "update:tabPanelOptions": null,
        "update:tabs": null,
        "update:visible": null,
        "update:visibleIndex": null,
    },
    props: {
        colSpan: Number,
        cssClass: String,
        itemType: String,
        name: String,
        tabPanelOptions: Object,
        tabs: Array,
        visible: Boolean,
        visibleIndex: Number
    }
});
exports.DxTabbedItem = DxTabbedItem;
DxTabbedItem.$_optionName = "items";
DxTabbedItem.$_isCollectionItem = true;
DxTabbedItem.$_predefinedProps = {
    itemType: "tabbed"
};
DxTabbedItem.$_expectedChildren = {
    tab: { isCollectionItem: true, optionName: "tabs" },
    tabPanelOptions: { isCollectionItem: false, optionName: "tabPanelOptions" }
};
var DxTabPanelOptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animationEnabled": null,
        "update:bindingOptions": null,
        "update:dataSource": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusedElement": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:itemHoldTimeout": null,
        "update:items": null,
        "update:itemTemplate": null,
        "update:itemTitleTemplate": null,
        "update:keyExpr": null,
        "update:loop": null,
        "update:loopItemFocus": null,
        "update:noDataText": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onItemClick": null,
        "update:onItemContextMenu": null,
        "update:onItemDeleted": null,
        "update:onItemDeleting": null,
        "update:onItemHold": null,
        "update:onItemRendered": null,
        "update:onItemReordered": null,
        "update:onOptionChanged": null,
        "update:onSelectionChanged": null,
        "update:onTitleClick": null,
        "update:onTitleHold": null,
        "update:onTitleRendered": null,
        "update:repaintChangesOnly": null,
        "update:rtlEnabled": null,
        "update:scrollByContent": null,
        "update:scrollingEnabled": null,
        "update:selectedIndex": null,
        "update:selectedItem": null,
        "update:selectedItemKeys": null,
        "update:selectedItems": null,
        "update:selectionByClick": null,
        "update:selectionMode": null,
        "update:selectionRequired": null,
        "update:selectOnFocus": null,
        "update:showNavButtons": null,
        "update:swipeEnabled": null,
        "update:tabIndex": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animationEnabled: Boolean,
        bindingOptions: Object,
        dataSource: [Array, Object, String],
        deferRendering: Boolean,
        disabled: Boolean,
        elementAttr: Object,
        focusedElement: {},
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        itemHoldTimeout: Number,
        items: Array,
        itemTemplate: {},
        itemTitleTemplate: {},
        keyExpr: [Function, String],
        loop: Boolean,
        loopItemFocus: Boolean,
        noDataText: String,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onItemClick: [Function, String],
        onItemContextMenu: Function,
        onItemDeleted: Function,
        onItemDeleting: Function,
        onItemHold: Function,
        onItemRendered: Function,
        onItemReordered: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        onTitleClick: [Function, String],
        onTitleHold: Function,
        onTitleRendered: Function,
        repaintChangesOnly: Boolean,
        rtlEnabled: Boolean,
        scrollByContent: Boolean,
        scrollingEnabled: Boolean,
        selectedIndex: Number,
        selectedItem: Object,
        selectedItemKeys: Array,
        selectedItems: Array,
        selectionByClick: Boolean,
        selectionMode: String,
        selectionRequired: Boolean,
        selectOnFocus: Boolean,
        showNavButtons: Boolean,
        swipeEnabled: Boolean,
        tabIndex: Number,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxTabPanelOptions = DxTabPanelOptions;
DxTabPanelOptions.$_optionName = "tabPanelOptions";
DxTabPanelOptions.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    tabPanelOptionsItem: { isCollectionItem: true, optionName: "items" }
};
var DxTabPanelOptionsItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:badge": null,
        "update:disabled": null,
        "update:html": null,
        "update:icon": null,
        "update:tabTemplate": null,
        "update:template": null,
        "update:text": null,
        "update:title": null,
        "update:visible": null,
    },
    props: {
        badge: String,
        disabled: Boolean,
        html: String,
        icon: String,
        tabTemplate: {},
        template: {},
        text: String,
        title: String,
        visible: Boolean
    }
});
exports.DxTabPanelOptionsItem = DxTabPanelOptionsItem;
DxTabPanelOptionsItem.$_optionName = "items";
DxTabPanelOptionsItem.$_isCollectionItem = true;
var DxTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:addRowToNode": null,
        "update:cancel": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:clearFilter": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:createFilter": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:emptyValue": null,
        "update:filterEnabledHint": null,
        "update:fix": null,
        "update:leftPosition": null,
        "update:ok": null,
        "update:rightPosition": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:undeleteRow": null,
        "update:unfix": null,
        "update:validationCancelChanges": null,
    },
    props: {
        addRow: String,
        addRowToNode: String,
        cancel: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        clearFilter: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        createFilter: String,
        deleteRow: String,
        editRow: String,
        emptyValue: String,
        filterEnabledHint: String,
        fix: String,
        leftPosition: String,
        ok: String,
        rightPosition: String,
        saveAllChanges: String,
        saveRowChanges: String,
        undeleteRow: String,
        unfix: String,
        validationCancelChanges: String
    }
});
exports.DxTexts = DxTexts;
DxTexts.$_optionName = "texts";
var DxToolbarItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:html": null,
        "update:location": null,
        "update:options": null,
        "update:template": null,
        "update:text": null,
        "update:toolbar": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        disabled: Boolean,
        html: String,
        location: String,
        options: Object,
        template: {},
        text: String,
        toolbar: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxToolbarItem = DxToolbarItem;
DxToolbarItem.$_optionName = "toolbarItems";
DxToolbarItem.$_isCollectionItem = true;
var DxTreeListHeaderFilter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:height": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        height: Number,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
    }
});
exports.DxTreeListHeaderFilter = DxTreeListHeaderFilter;
DxTreeListHeaderFilter.$_optionName = "headerFilter";
DxTreeListHeaderFilter.$_expectedChildren = {
    texts: { isCollectionItem: false, optionName: "texts" },
    treeListHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" }
};
var DxTreeListHeaderFilterTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null,
    },
    props: {
        cancel: String,
        emptyValue: String,
        ok: String
    }
});
exports.DxTreeListHeaderFilterTexts = DxTreeListHeaderFilterTexts;
DxTreeListHeaderFilterTexts.$_optionName = "texts";
var DxValidationRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:pattern": null,
        "update:reevaluate": null,
        "update:trim": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        pattern: {},
        reevaluate: Boolean,
        trim: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxValidationRule = DxValidationRule;
DxValidationRule.$_optionName = "validationRules";
DxValidationRule.$_isCollectionItem = true;
DxValidationRule.$_predefinedProps = {
    type: "required"
};
exports["default"] = DxTreeList;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list.js":
/*!*****************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports["default"] = void 0;
var _ui = _interopRequireDefault(__webpack_require__(/*! ./tree_list/ui.tree_list */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var _default = _ui.default;
exports["default"] = _default;
module.exports = exports.default;
module.exports["default"] = module.exports;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.adaptivity.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.adaptivity.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.adaptivity.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.adaptivity */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.adaptivity.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("adaptivity", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.base.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.base.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.base.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports["default"] = void 0;
var _component_registrator = _interopRequireDefault(__webpack_require__(/*! ../../core/component_registrator */ "../../node_modules/devextreme/core/component_registrator.js"));
var _common = __webpack_require__(/*! ../../core/utils/common */ "../../node_modules/devextreme/core/utils/common.js");
var _type = __webpack_require__(/*! ../../core/utils/type */ "../../node_modules/devextreme/core/utils/type.js");
var _iterator = __webpack_require__(/*! ../../core/utils/iterator */ "../../node_modules/devextreme/core/utils/iterator.js");
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _ui = _interopRequireDefault(__webpack_require__(/*! ../widget/ui.widget */ "../../node_modules/devextreme/ui/widget/ui.widget.js"));
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _themes = __webpack_require__(/*! ../themes */ "../../node_modules/devextreme/ui/themes.js");
__webpack_require__(/*! ./ui.tree_list.column_headers */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_headers.js");
__webpack_require__(/*! ./ui.tree_list.columns_controller */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_controller.js");
__webpack_require__(/*! ./ui.tree_list.data_controller */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_controller.js");
__webpack_require__(/*! ./ui.tree_list.sorting */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.sorting.js");
__webpack_require__(/*! ./ui.tree_list.rows */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.rows.js");
__webpack_require__(/*! ./ui.tree_list.context_menu */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.context_menu.js");
__webpack_require__(/*! ./ui.tree_list.error_handling */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.error_handling.js");
__webpack_require__(/*! ./ui.tree_list.grid_view */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.grid_view.js");
__webpack_require__(/*! ./ui.tree_list.header_panel */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_panel.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var callModuleItemsMethod = _uiTree_list.default.callModuleItemsMethod;
var DATAGRID_ROW_SELECTOR = ".dx-row";
var TREELIST_CLASS = "dx-treelist";
_uiTree_list.default.registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "editing", "grouping", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
var TreeList = _ui.default.inherit({
    _activeStateUnit: DATAGRID_ROW_SELECTOR,
    _getDefaultOptions: function() {
        var that = this;
        var result = that.callBase();
        (0, _iterator.each)(_uiTree_list.default.modules, function() {
            if ((0, _type.isFunction)(this.defaultOptions)) {
                (0, _extend.extend)(true, result, this.defaultOptions())
            }
        });
        return result
    },
    _defaultOptionsRules: function() {
        return this.callBase().concat([{
            device: function() {
                return (0, _themes.isMaterial)()
            },
            options: {
                showRowLines: true,
                showColumnLines: false,
                headerFilter: {
                    height: 315
                },
                editing: {
                    useIcons: true
                }
            }
        }])
    },
    _init: function() {
        var that = this;
        that.callBase();
        _uiTree_list.default.processModules(that, _uiTree_list.default);
        callModuleItemsMethod(that, "init")
    },
    _clean: _common.noop,
    _optionChanged: function(args) {
        var that = this;
        callModuleItemsMethod(that, "optionChanged", [args]);
        if (!args.handled) {
            that.callBase(args)
        }
    },
    _dimensionChanged: function() {
        this.updateDimensions(true)
    },
    _visibilityChanged: function(visible) {
        if (visible) {
            this.updateDimensions()
        }
    },
    _initMarkup: function() {
        this.callBase.apply(this, arguments);
        this.$element().addClass(TREELIST_CLASS);
        this.getView("gridView").render(this.$element())
    },
    _renderContentImpl: function() {
        this.getView("gridView").update()
    },
    _renderContent: function() {
        var that = this;
        (0, _common.deferRender)(function() {
            that._renderContentImpl()
        })
    },
    _dispose: function() {
        var that = this;
        that.callBase();
        callModuleItemsMethod(that, "dispose")
    },
    isReady: function() {
        return this.getController("data").isReady()
    },
    beginUpdate: function() {
        var that = this;
        that.callBase();
        callModuleItemsMethod(that, "beginUpdate")
    },
    endUpdate: function() {
        var that = this;
        callModuleItemsMethod(that, "endUpdate");
        that.callBase()
    },
    getController: function(name) {
        return this._controllers[name]
    },
    getView: function(name) {
        return this._views[name]
    },
    focus: function(element) {
        this.callBase();
        if ((0, _type.isDefined)(element)) {
            this.getController("keyboardNavigation").focus(element)
        }
    }
});
TreeList.registerModule = _uiTree_list.default.registerModule.bind(_uiTree_list.default);
(0, _component_registrator.default)("dxTreeList", TreeList);
var _default = TreeList;
exports["default"] = _default;
module.exports = exports.default;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_chooser.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_chooser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.column_chooser.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.column_chooser */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.column_chooser.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("columnChooser", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_fixing.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_fixing.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.column_fixing.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.column_fixing */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.column_fixing.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("columnFixing", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_headers.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_headers.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.column_headers.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.column_headers */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.column_headers.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("columnHeaders", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_controller.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_controller.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.columns_controller.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports.ColumnsController = void 0;
var _type = __webpack_require__(/*! ../../core/utils/type */ "../../node_modules/devextreme/core/utils/type.js");
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.columns_controller */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.columns_controller.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var ColumnsController = _uiGrid_core.default.controllers.columns.inherit(function() {
    return {
        _getFirstItems: function(dataSourceAdapter) {
            return this.callBase(dataSourceAdapter).map(function(node) {
                return node.data
            })
        },
        getFirstDataColumnIndex: function() {
            var visibleColumns = this.getVisibleColumns();
            var visibleColumnsLength = visibleColumns.length;
            var firstDataColumnIndex = 0;
            for (var i = 0; i <= visibleColumnsLength - 1; i++) {
                if (!(0, _type.isDefined)(visibleColumns[i].command)) {
                    firstDataColumnIndex = visibleColumns[i].index;
                    break
                }
            }
            return firstDataColumnIndex
        }
    }
}());
exports.ColumnsController = ColumnsController;
_uiTree_list.default.registerModule("columns", {
    defaultOptions: _uiGrid_core.default.defaultOptions,
    controllers: {
        columns: ColumnsController
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_resizing_reordering.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_resizing_reordering.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.columns_resizing_reordering.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.columns_resizing_reordering */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.columns_resizing_reordering.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("columnsResizingReordering", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.context_menu.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.context_menu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.context_menu.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.context_menu */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.context_menu.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("contextMenu", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.core.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports["default"] = void 0;
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.modules */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.modules.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var _default = (0, _extend.extend)({}, _uiGrid_core.default, {
    modules: [],
    foreachNodes: function(nodes, callBack, ignoreHasChildren) {
        for (var i = 0; i < nodes.length; i++) {
            if (false !== callBack(nodes[i]) && (ignoreHasChildren || nodes[i].hasChildren) && nodes[i].children.length) {
                this.foreachNodes(nodes[i].children, callBack, ignoreHasChildren)
            }
        }
    }
});
exports["default"] = _default;
module.exports = exports.default;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_controller.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_controller.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.data_controller.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports.DataController = void 0;
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _deferred = __webpack_require__(/*! ../../core/utils/deferred */ "../../node_modules/devextreme/core/utils/deferred.js");
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _common = __webpack_require__(/*! ../../core/utils/common */ "../../node_modules/devextreme/core/utils/common.js");
var _uiTree_list2 = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.data_source_adapter */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_source_adapter.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.data_controller */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.data_controller.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var DataController = _uiGrid_core.default.controllers.data.inherit(function() {
    return {
        _getDataSourceAdapter: function() {
            return _uiTree_list2.default
        },
        _getNodeLevel: function(node) {
            var level = -1;
            while (node.parent) {
                if (node.visible) {
                    level++
                }
                node = node.parent
            }
            return level
        },
        _generateDataItem: function(node, options) {
            return {
                rowType: "data",
                node: node,
                key: node.key,
                data: node.data,
                isExpanded: this.isRowExpanded(node.key, options),
                level: this._getNodeLevel(node)
            }
        },
        _loadOnOptionChange: function() {
            this._dataSource.load()
        },
        _isItemEquals: function(item1, item2) {
            if (!this.callBase.apply(this, arguments)) {
                return false
            }
            if (item1.node && item2.node && item1.node.hasChildren !== item2.node.hasChildren) {
                return false
            }
            if (item1.level !== item2.level || item1.isExpanded !== item2.isExpanded) {
                return false
            }
            return true
        },
        init: function() {
            this.createAction("onRowExpanding");
            this.createAction("onRowExpanded");
            this.createAction("onRowCollapsing");
            this.createAction("onRowCollapsed");
            this.callBase.apply(this, arguments)
        },
        keyOf: function(data) {
            var dataSource = this._dataSource;
            if (dataSource) {
                return dataSource.keyOf(data)
            }
        },
        key: function() {
            var dataSource = this._dataSource;
            if (dataSource) {
                return dataSource.getKeyExpr()
            }
        },
        publicMethods: function() {
            return this.callBase().concat(["expandRow", "collapseRow", "isRowExpanded", "getRootNode", "getNodeByKey", "loadDescendants", "forEachNode"])
        },
        changeRowExpand: function(key) {
            if (this._dataSource) {
                var that = this;
                var args = {
                    key: key
                };
                var isExpanded = this.isRowExpanded(key);
                that.executeAction(isExpanded ? "onRowCollapsing" : "onRowExpanding", args);
                if (!args.cancel) {
                    return that._dataSource.changeRowExpand(key).done(function() {
                        that.executeAction(isExpanded ? "onRowCollapsed" : "onRowExpanded", args)
                    })
                }
            }
            return (new _deferred.Deferred).resolve()
        },
        isRowExpanded: function(key, cache) {
            return this._dataSource && this._dataSource.isRowExpanded(key, cache)
        },
        expandRow: function(key) {
            if (!this.isRowExpanded(key)) {
                return this.changeRowExpand(key)
            }
            return (new _deferred.Deferred).resolve()
        },
        collapseRow: function(key) {
            if (this.isRowExpanded(key)) {
                return this.changeRowExpand(key)
            }
            return (new _deferred.Deferred).resolve()
        },
        getRootNode: function() {
            return this._dataSource && this._dataSource.getRootNode()
        },
        optionChanged: function(args) {
            switch (args.name) {
                case "rootValue":
                case "parentIdExpr":
                case "itemsExpr":
                case "filterMode":
                case "expandNodesOnFiltering":
                case "autoExpandAll":
                case "hasItemsExpr":
                case "dataStructure":
                    this._columnsController.reset();
                    this._items = [];
                    this._refreshDataSource();
                    args.handled = true;
                    break;
                case "expandedRowKeys":
                case "onNodesInitialized":
                    if (this._dataSource && !this._dataSource._isNodesInitializing && !(0, _common.equalByValue)(args.value, args.previousValue)) {
                        this._loadOnOptionChange()
                    }
                    args.handled = true;
                    break;
                case "maxFilterLengthInRequest":
                    args.handled = true;
                    break;
                default:
                    this.callBase(args)
            }
        },
        getNodeByKey: function(key) {
            if (!this._dataSource) {
                return
            }
            return this._dataSource.getNodeByKey(key)
        },
        getChildNodeKeys: function(parentKey) {
            if (!this._dataSource) {
                return
            }
            return this._dataSource.getChildNodeKeys(parentKey)
        },
        loadDescendants: function(keys, childrenOnly) {
            if (!this._dataSource) {
                return
            }
            return this._dataSource.loadDescendants(keys, childrenOnly)
        },
        forEachNode: function() {
            this._dataSource.forEachNode.apply(this, arguments)
        }
    }
}());
exports.DataController = DataController;
_uiTree_list.default.registerModule("data", {
    defaultOptions: function() {
        return (0, _extend.extend)({}, _uiGrid_core.default.defaultOptions(), {
            itemsExpr: "items",
            parentIdExpr: "parentId",
            rootValue: 0,
            dataStructure: "plain",
            expandedRowKeys: [],
            filterMode: "withAncestors",
            expandNodesOnFiltering: true,
            autoExpandAll: false,
            onNodesInitialized: null,
            maxFilterLengthInRequest: 1500,
            paging: {
                enabled: false
            }
        })
    },
    controllers: {
        data: DataController
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_source_adapter.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_source_adapter.js ***!
  \**************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.data_source_adapter.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports["default"] = void 0;
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _ui = _interopRequireDefault(__webpack_require__(/*! ../widget/ui.errors */ "../../node_modules/devextreme/ui/widget/ui.errors.js"));
var _common = __webpack_require__(/*! ../../core/utils/common */ "../../node_modules/devextreme/core/utils/common.js");
var _type = __webpack_require__(/*! ../../core/utils/type */ "../../node_modules/devextreme/core/utils/type.js");
var _iterator = __webpack_require__(/*! ../../core/utils/iterator */ "../../node_modules/devextreme/core/utils/iterator.js");
var _data = __webpack_require__(/*! ../../core/utils/data */ "../../node_modules/devextreme/core/utils/data.js");
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.utils */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.utils.js"));
var _array_utils = __webpack_require__(/*! ../../data/array_utils */ "../../node_modules/devextreme/data/array_utils.js");
var _array_store = _interopRequireDefault(__webpack_require__(/*! ../../data/array_store */ "../../node_modules/devextreme/data/array_store.js"));
var _query = _interopRequireDefault(__webpack_require__(/*! ../../data/query */ "../../node_modules/devextreme/data/query.js"));
var _uiGrid_core2 = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.data_source_adapter */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.data_source_adapter.js"));
var _deferred = __webpack_require__(/*! ../../core/utils/deferred */ "../../node_modules/devextreme/core/utils/deferred.js");
var _store_helper = _interopRequireDefault(__webpack_require__(/*! ../../data/store_helper */ "../../node_modules/devextreme/data/store_helper.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var queryByOptions = _store_helper.default.queryByOptions;
var DEFAULT_KEY_EXPRESSION = "id";
var isFullBranchFilterMode = function(that) {
    return "fullBranch" === that.option("filterMode")
};
var DataSourceAdapterTreeList = _uiGrid_core2.default.inherit(function() {
    var getChildKeys = function(that, keys) {
        var childKeys = [];
        keys.forEach(function(key) {
            var node = that.getNodeByKey(key);
            node && node.children.forEach(function(child) {
                childKeys.push(child.key)
            })
        });
        return childKeys
    };
    return {
        _createKeyGetter: function() {
            var keyExpr = this.getKeyExpr();
            return (0, _data.compileGetter)(keyExpr)
        },
        _createKeySetter: function() {
            var keyExpr = this.getKeyExpr();
            if ((0, _type.isFunction)(keyExpr)) {
                return keyExpr
            }
            return (0, _data.compileSetter)(keyExpr)
        },
        _createParentIdGetter: function() {
            return (0, _data.compileGetter)(this.option("parentIdExpr"))
        },
        createParentIdSetter: function() {
            var parentIdExpr = this.option("parentIdExpr");
            if ((0, _type.isFunction)(parentIdExpr)) {
                return parentIdExpr
            }
            return (0, _data.compileSetter)(parentIdExpr)
        },
        _createItemsGetter: function() {
            return (0, _data.compileGetter)(this.option("itemsExpr"))
        },
        _createHasItemsGetter: function() {
            var hasItemsExpr = this.option("hasItemsExpr");
            return hasItemsExpr && (0, _data.compileGetter)(hasItemsExpr)
        },
        _createHasItemsSetter: function() {
            var hasItemsExpr = this.option("hasItemsExpr");
            if ((0, _type.isFunction)(hasItemsExpr)) {
                return hasItemsExpr
            }
            return hasItemsExpr && (0, _data.compileSetter)(hasItemsExpr)
        },
        _updateIndexByKeyObject: function(items) {
            var that = this;
            that._indexByKey = {};
            (0, _iterator.each)(items, function(index, item) {
                that._indexByKey[item.key] = index
            })
        },
        _calculateHasItems: function(node, options) {
            var that = this;
            var parentIds = options.storeLoadOptions.parentIds;
            var hasItems;
            var isFullBranch = isFullBranchFilterMode(that);
            if (that._hasItemsGetter && (parentIds || !options.storeLoadOptions.filter || isFullBranch)) {
                hasItems = that._hasItemsGetter(node.data)
            }
            if (void 0 === hasItems) {
                if (!that._isChildrenLoaded[node.key] && options.remoteOperations.filtering && (parentIds || isFullBranch)) {
                    hasItems = true
                } else {
                    if (options.loadOptions.filter && !options.remoteOperations.filtering && isFullBranch) {
                        hasItems = node.children.length
                    } else {
                        hasItems = node.hasChildren
                    }
                }
            }
            return !!hasItems
        },
        _fillVisibleItemsByNodes: function(nodes, options, result) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].visible) {
                    result.push(nodes[i])
                }
                if ((this.isRowExpanded(nodes[i].key, options) || !nodes[i].visible) && nodes[i].hasChildren && nodes[i].children.length) {
                    this._fillVisibleItemsByNodes(nodes[i].children, options, result)
                }
            }
        },
        _convertItemToNode: function(item, rootValue, nodeByKey) {
            var key = this._keyGetter(item);
            var parentId = this._parentIdGetter(item);
            parentId = (0, _type.isDefined)(parentId) ? parentId : rootValue;
            var parentNode = nodeByKey[parentId] = nodeByKey[parentId] || {
                key: parentId,
                children: []
            };
            var node = nodeByKey[key] = nodeByKey[key] || {
                key: key,
                children: []
            };
            node.data = item;
            node.parent = parentNode;
            return node
        },
        _createNodesByItems: function(items, visibleItems) {
            var that = this;
            var rootValue = that.option("rootValue");
            var visibleByKey = {};
            var nodeByKey = that._nodeByKey = {};
            var i;
            if (visibleItems) {
                for (i = 0; i < visibleItems.length; i++) {
                    visibleByKey[this._keyGetter(visibleItems[i])] = true
                }
            }
            for (i = 0; i < items.length; i++) {
                var node = that._convertItemToNode(items[i], rootValue, nodeByKey);
                if (void 0 === node.key) {
                    return
                }
                node.visible = !visibleItems || !!visibleByKey[node.key];
                if (node.parent) {
                    node.parent.children.push(node)
                }
            }
            var rootNode = nodeByKey[rootValue] || {
                key: rootValue,
                children: []
            };
            rootNode.level = -1;
            return rootNode
        },
        _convertDataToPlainStructure: function(data, parentId, result) {
            var key;
            if (this._itemsGetter && !data.isConverted) {
                result = result || [];
                for (var i = 0; i < data.length; i++) {
                    var item = (0, _array_utils.createObjectWithChanges)(data[i]);
                    key = this._keyGetter(item);
                    if (void 0 === key) {
                        key = result.length + 1;
                        this._keySetter(item, key)
                    }
                    this._parentIdSetter(item, void 0 === parentId ? this.option("rootValue") : parentId);
                    result.push(item);
                    var childItems = this._itemsGetter(item);
                    if (childItems && childItems.length) {
                        this._convertDataToPlainStructure(childItems, key, result);
                        var itemsExpr = this.option("itemsExpr");
                        if (!(0, _type.isFunction)(itemsExpr)) {
                            delete item[itemsExpr]
                        }
                    }
                }
                result.isConverted = true;
                return result
            }
            return data
        },
        _createIdFilter: function(field, keys) {
            var parentIdFilters = [];
            for (var i = 0; i < keys.length; i++) {
                parentIdFilters.push([field, "=", keys[i]])
            }
            return _uiGrid_core.default.combineFilters(parentIdFilters, "or")
        },
        _customizeRemoteOperations: function(options, operationTypes) {
            this.callBase.apply(this, arguments);
            options.remoteOperations.paging = false;
            var expandVisibleNodes = false;
            if (this.option("autoExpandAll")) {
                options.remoteOperations.sorting = false;
                options.remoteOperations.filtering = false;
                if ((!this._lastLoadOptions || operationTypes.filtering && !options.storeLoadOptions.filter) && !options.isCustomLoading) {
                    expandVisibleNodes = true
                }
            }
            if (!options.isCustomLoading) {
                this._isReload = this._isReload || operationTypes.reload;
                if (!options.cachedStoreData) {
                    this._isChildrenLoaded = {};
                    if (this._isReload) {
                        this._nodeByKey = {}
                    }
                }
                if (this.option("expandNodesOnFiltering") && (operationTypes.filtering || this._isReload && options.storeLoadOptions.filter)) {
                    if (options.storeLoadOptions.filter) {
                        expandVisibleNodes = true
                    } else {
                        options.collapseVisibleNodes = true
                    }
                }
            }
            options.expandVisibleNodes = expandVisibleNodes
        },
        _getParentIdsToLoad: function(parentIds) {
            var parentIdsToLoad = [];
            for (var i = 0; i < parentIds.length; i++) {
                var node = this.getNodeByKey(parentIds[i]);
                if (!node || node.hasChildren && !node.children.length) {
                    parentIdsToLoad.push(parentIds[i])
                }
            }
            return parentIdsToLoad
        },
        _handleDataLoading: function(options) {
            var rootValue = this.option("rootValue");
            var parentIdExpr = this.option("parentIdExpr");
            var parentIds = options.storeLoadOptions.parentIds;
            if (parentIds) {
                options.isCustomLoading = false
            }
            this.callBase.apply(this, arguments);
            if (options.remoteOperations.filtering && !options.isCustomLoading) {
                if (isFullBranchFilterMode(this) && options.cachedStoreData || !options.storeLoadOptions.filter) {
                    var expandedRowKeys = options.collapseVisibleNodes ? [] : this.option("expandedRowKeys");
                    parentIds = [rootValue].concat(expandedRowKeys).concat(parentIds || []);
                    var parentIdsToLoad = options.data ? this._getParentIdsToLoad(parentIds) : parentIds;
                    if (parentIdsToLoad.length) {
                        options.cachedPagingData = void 0;
                        options.data = void 0;
                        options.mergeStoreLoadData = true;
                        options.delay = this.option("loadingTimeout")
                    }
                    options.storeLoadOptions.parentIds = parentIdsToLoad;
                    options.storeLoadOptions.filter = this._createIdFilter(parentIdExpr, parentIdsToLoad)
                }
            }
        },
        _generateInfoToLoad: function(data, needChildren) {
            var that = this;
            var key;
            var keyMap = {};
            var resultKeyMap = {};
            var resultKeys = [];
            var rootValue = that.option("rootValue");
            var i;
            for (i = 0; i < data.length; i++) {
                key = needChildren ? that._parentIdGetter(data[i]) : that._keyGetter(data[i]);
                keyMap[key] = true
            }
            for (i = 0; i < data.length; i++) {
                key = needChildren ? that._keyGetter(data[i]) : that._parentIdGetter(data[i]);
                var needToLoad = needChildren ? that.isRowExpanded(key) : key !== rootValue;
                if (!keyMap[key] && !resultKeyMap[key] && needToLoad) {
                    resultKeyMap[key] = true;
                    resultKeys.push(key)
                }
            }
            return {
                keyMap: resultKeyMap,
                keys: resultKeys
            }
        },
        _loadParentsOrChildren: function(data, options, needChildren) {
            var _this = this;
            var that = this;
            var filter;
            var needLocalFiltering;
            var _that$_generateInfoTo = that._generateInfoToLoad(data, needChildren),
                keys = _that$_generateInfoTo.keys,
                keyMap = _that$_generateInfoTo.keyMap;
            var d = new _deferred.Deferred;
            var isRemoteFiltering = options.remoteOperations.filtering;
            var maxFilterLengthInRequest = that.option("maxFilterLengthInRequest");
            var loadOptions = isRemoteFiltering ? options.storeLoadOptions : options.loadOptions;

            function concatLoadedData(loadedData) {
                if (isRemoteFiltering) {
                    that._cachedStoreData = that._cachedStoreData.concat(loadedData)
                }
                return data.concat(loadedData)
            }
            if (!keys.length) {
                return d.resolve(data)
            }
            var cachedNodes = keys.map(function(id) {
                return _this.getNodeByKey(id)
            }).filter(function(node) {
                return node && node.data
            });
            if (cachedNodes.length === keys.length) {
                if (needChildren) {
                    cachedNodes = cachedNodes.reduce(function(result, node) {
                        return result.concat(node.children)
                    }, [])
                }
                if (cachedNodes.length) {
                    return that._loadParentsOrChildren(concatLoadedData(cachedNodes.map(function(node) {
                        return node.data
                    })), options, needChildren)
                }
            }
            var keyExpr = needChildren ? that.option("parentIdExpr") : that.getKeyExpr();
            filter = that._createIdFilter(keyExpr, keys);
            var filterLength = encodeURI(JSON.stringify(filter)).length;
            if (filterLength > maxFilterLengthInRequest) {
                filter = function(itemData) {
                    return keyMap[that._keyGetter(itemData)]
                };
                needLocalFiltering = isRemoteFiltering
            }
            loadOptions = (0, _extend.extend)({}, loadOptions, {
                filter: !needLocalFiltering ? filter : null
            });
            var store = options.fullData ? new _array_store.default(options.fullData) : that._dataSource.store();
            that.loadFromStore(loadOptions, store).done(function(loadedData) {
                if (loadedData.length) {
                    if (needLocalFiltering) {
                        loadedData = (0, _query.default)(loadedData).filter(filter).toArray()
                    }
                    that._loadParentsOrChildren(concatLoadedData(loadedData), options, needChildren).done(d.resolve).fail(d.reject)
                } else {
                    d.resolve(data)
                }
            }).fail(d.reject);
            return d
        },
        _loadParents: function(data, options) {
            return this._loadParentsOrChildren(data, options)
        },
        _loadChildrenIfNeed: function(data, options) {
            if (isFullBranchFilterMode(this)) {
                return this._loadParentsOrChildren(data, options, true)
            }
            return (0, _deferred.when)(data)
        },
        _updateHasItemsMap: function(options) {
            var parentIds = options.storeLoadOptions.parentIds;
            if (parentIds) {
                for (var i = 0; i < parentIds.length; i++) {
                    this._isChildrenLoaded[parentIds[i]] = true
                }
            }
        },
        _getKeyInfo: function() {
            return {
                key: function() {
                    return "key"
                },
                keyOf: function(data) {
                    return data.key
                }
            }
        },
        _applyBatch: function(changes) {
            var _this2 = this;
            var baseChanges = [];
            changes.forEach(function(change) {
                if ("insert" === change.type) {
                    baseChanges = baseChanges.concat(_this2._applyInsert(change))
                } else {
                    if ("remove" === change.type) {
                        baseChanges = baseChanges.concat(_this2._applyRemove(change))
                    } else {
                        if ("update" === change.type) {
                            baseChanges.push({
                                type: change.type,
                                key: change.key,
                                data: {
                                    data: change.data
                                }
                            })
                        }
                    }
                }
            });
            this.callBase(baseChanges)
        },
        _setHasItems: function(node, value) {
            var hasItemsSetter = this._hasItemsSetter;
            node.hasChildren = value;
            if (hasItemsSetter && node.data) {
                hasItemsSetter(node.data, value)
            }
        },
        _applyInsert: function(change) {
            var that = this;
            var baseChanges = [];
            var parentId = that.parentKeyOf(change.data);
            var parentNode = that.getNodeByKey(parentId);
            if (parentNode) {
                var rootValue = that.option("rootValue");
                var node = that._convertItemToNode(change.data, rootValue, that._nodeByKey);
                node.hasChildren = false;
                node.level = parentNode.level + 1;
                node.visible = true;
                parentNode.children.push(node);
                that._isChildrenLoaded[node.key] = true;
                that._setHasItems(parentNode, true);
                if ((!parentNode.parent || that.isRowExpanded(parentNode.key)) && void 0 !== change.index) {
                    var index = that.items().indexOf(parentNode) + 1;
                    index += change.index >= 0 ? Math.min(change.index, parentNode.children.length) : parentNode.children.length;
                    baseChanges.push({
                        type: change.type,
                        data: node,
                        index: index
                    })
                }
            }
            return baseChanges
        },
        _applyRemove: function(change) {
            var baseChanges = [];
            var node = this.getNodeByKey(change.key);
            var parentNode = node && node.parent;
            if (parentNode) {
                var index = parentNode.children.indexOf(node);
                if (index >= 0) {
                    parentNode.children.splice(index, 1);
                    if (!parentNode.children.length) {
                        this._setHasItems(parentNode, false)
                    }
                    baseChanges.push(change);
                    baseChanges = baseChanges.concat(this.getChildNodeKeys(change.key).map(function(key) {
                        return {
                            type: change.type,
                            key: key
                        }
                    }))
                }
            }
            return baseChanges
        },
        _handleDataLoaded: function(options) {
            var data = options.data = this._convertDataToPlainStructure(options.data);
            if (!options.remoteOperations.filtering && options.loadOptions.filter) {
                options.fullData = queryByOptions((0, _query.default)(options.data), {
                    sort: options.loadOptions && options.loadOptions.sort
                }).toArray()
            }
            this._updateHasItemsMap(options);
            this.callBase(options);
            if (data.isConverted && this._cachedStoreData) {
                this._cachedStoreData.isConverted = true
            }
        },
        _fillNodes: function(nodes, options, expandedRowKeys, level) {
            var isFullBranch = isFullBranchFilterMode(this);
            level = level || 0;
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                var needToExpand = false;
                this._fillNodes(nodes[i].children, options, expandedRowKeys, level + 1);
                node.level = level;
                node.hasChildren = this._calculateHasItems(node, options);
                if (node.visible && node.hasChildren) {
                    if (isFullBranch) {
                        if (node.children.filter(function(node) {
                                return node.visible
                            }).length) {
                            needToExpand = true
                        } else {
                            if (node.children.length) {
                                _uiTree_list.default.foreachNodes(node.children, function(node) {
                                    node.visible = true
                                })
                            }
                        }
                    } else {
                        needToExpand = true
                    }
                    if (options.expandVisibleNodes && needToExpand) {
                        expandedRowKeys.push(node.key)
                    }
                }
                if (node.visible || node.hasChildren) {
                    node.parent.hasChildren = true
                }
            }
        },
        _processTreeStructure: function(options, visibleItems) {
            var data = options.data;
            var parentIds = options.storeLoadOptions.parentIds;
            var expandedRowKeys = [];
            if (parentIds && parentIds.length || this._isReload) {
                if (options.fullData && options.fullData.length > options.data.length) {
                    data = options.fullData;
                    visibleItems = visibleItems || options.data
                }
                this._rootNode = this._createNodesByItems(data, visibleItems);
                if (!this._rootNode) {
                    options.data = (new _deferred.Deferred).reject(_ui.default.Error("E1046", this.getKeyExpr()));
                    return
                }
                this._fillNodes(this._rootNode.children, options, expandedRowKeys);
                this._isNodesInitializing = true;
                if (options.collapseVisibleNodes || expandedRowKeys.length) {
                    this.option("expandedRowKeys", expandedRowKeys)
                }
                this._isReload = false;
                this.executeAction("onNodesInitialized", {
                    root: this._rootNode
                });
                this._isNodesInitializing = false
            }
            var resultData = [];
            this._fillVisibleItemsByNodes(this._rootNode.children, options, resultData);
            options.data = resultData;
            this._totalItemsCount = resultData.length
        },
        _handleDataLoadedCore: function(options) {
            var that = this;
            var data = options.data;
            var callBase = that.callBase;
            var filter = options.storeLoadOptions.filter || options.loadOptions.filter;
            var filterMode = that.option("filterMode");
            var visibleItems;
            var parentIds = options.storeLoadOptions.parentIds;
            var needLoadParents = filter && (!parentIds || !parentIds.length) && "standard" !== filterMode;
            if (!options.isCustomLoading) {
                if (needLoadParents) {
                    var d = options.data = new _deferred.Deferred;
                    if ("matchOnly" === filterMode) {
                        visibleItems = data
                    }
                    return that._loadParents(data, options).done(function(data) {
                        that._loadChildrenIfNeed(data, options).done(function(data) {
                            options.data = data;
                            that._processTreeStructure(options, visibleItems);
                            callBase.call(that, options);
                            d.resolve(options.data)
                        })
                    }).fail(d.reject)
                } else {
                    that._processTreeStructure(options)
                }
            }
            that.callBase(options)
        },
        _handlePush: function(changes) {
            var reshapeOnPush = this._dataSource._reshapeOnPush;
            var isNeedReshape = reshapeOnPush && !!changes.length;
            if (isNeedReshape) {
                this._isReload = true
            }
            this.callBase.apply(this, arguments)
        },
        init: function(dataSource, remoteOperations) {
            this.callBase.apply(this, arguments);
            var dataStructure = this.option("dataStructure");
            this._keyGetter = this._createKeyGetter();
            this._parentIdGetter = this._createParentIdGetter();
            this._hasItemsGetter = this._createHasItemsGetter();
            this._hasItemsSetter = this._createHasItemsSetter();
            if ("tree" === dataStructure) {
                this._itemsGetter = this._createItemsGetter();
                this._keySetter = this._createKeySetter();
                this._parentIdSetter = this.createParentIdSetter()
            }
            this._nodeByKey = {};
            this._isChildrenLoaded = {};
            this._totalItemsCount = 0;
            this.createAction("onNodesInitialized")
        },
        getKeyExpr: function() {
            var store = this.store();
            var key = store && store.key();
            var keyExpr = this.option("keyExpr");
            if ((0, _type.isDefined)(key) && (0, _type.isDefined)(keyExpr)) {
                if (!(0, _common.equalByValue)(key, keyExpr)) {
                    throw _ui.default.Error("E1044")
                }
            }
            return key || keyExpr || DEFAULT_KEY_EXPRESSION
        },
        keyOf: function(data) {
            return this._keyGetter && this._keyGetter(data)
        },
        parentKeyOf: function(data) {
            return this._parentIdGetter && this._parentIdGetter(data)
        },
        getRootNode: function() {
            return this._rootNode
        },
        totalItemsCount: function() {
            return this._totalItemsCount
        },
        isRowExpanded: function(key, cache) {
            if (cache) {
                var isExpandedByKey = cache.isExpandedByKey;
                if (!isExpandedByKey) {
                    isExpandedByKey = cache.isExpandedByKey = {};
                    this.option("expandedRowKeys").forEach(function(key) {
                        isExpandedByKey[key] = true
                    })
                }
                return !!isExpandedByKey[key]
            }
            var indexExpandedNodeKey = _uiGrid_core.default.getIndexByKey(key, this.option("expandedRowKeys"), null);
            return indexExpandedNodeKey >= 0
        },
        _changeRowExpandCore: function(key) {
            var expandedRowKeys = this.option("expandedRowKeys").slice();
            var indexExpandedNodeKey = _uiGrid_core.default.getIndexByKey(key, expandedRowKeys, null);
            if (indexExpandedNodeKey < 0) {
                expandedRowKeys.push(key)
            } else {
                expandedRowKeys.splice(indexExpandedNodeKey, 1)
            }
            this.option("expandedRowKeys", expandedRowKeys)
        },
        changeRowExpand: function(key) {
            this._changeRowExpandCore(key);
            return this._isNodesInitializing ? (new _deferred.Deferred).resolve() : this.load()
        },
        getNodeByKey: function(key) {
            if (this._nodeByKey) {
                return this._nodeByKey[key]
            }
        },
        getNodeLeafKeys: function() {
            var that = this;
            var result = [];
            var keys = that._rootNode ? [that._rootNode.key] : [];
            keys.forEach(function(key) {
                var node = that.getNodeByKey(key);
                node && _uiTree_list.default.foreachNodes([node], function(childNode) {
                    !childNode.children.length && result.push(childNode.key)
                })
            });
            return result
        },
        getChildNodeKeys: function(parentKey) {
            var node = this.getNodeByKey(parentKey);
            var childrenKeys = [];
            node && _uiTree_list.default.foreachNodes(node.children, function(childNode) {
                childrenKeys.push(childNode.key)
            });
            return childrenKeys
        },
        loadDescendants: function(keys, childrenOnly) {
            var that = this;
            var d = new _deferred.Deferred;
            var remoteOperations = that.remoteOperations();
            if ((0, _type.isDefined)(keys)) {
                keys = Array.isArray(keys) ? keys : [keys]
            } else {
                keys = that.getNodeLeafKeys()
            }
            if (!remoteOperations.filtering || !keys.length) {
                return d.resolve()
            }
            var loadOptions = that._dataSource._createStoreLoadOptions();
            loadOptions.parentIds = keys;
            that.load(loadOptions).done(function() {
                if (!childrenOnly) {
                    var childKeys = getChildKeys(that, keys);
                    if (childKeys.length) {
                        that.loadDescendants(childKeys, childrenOnly).done(d.resolve).fail(d.reject);
                        return
                    }
                }
                d.resolve()
            }).fail(d.reject);
            return d.promise()
        },
        forEachNode: function() {
            var nodes = [];
            var callback;
            if (1 === arguments.length) {
                callback = arguments[0];
                var rootNode = this.getRootNode();
                nodes = rootNode && rootNode.children || []
            } else {
                if (2 === arguments.length) {
                    callback = arguments[1];
                    nodes = arguments[0];
                    nodes = Array.isArray(nodes) ? nodes : [nodes]
                }
            }
            _uiTree_list.default.foreachNodes(nodes, callback)
        }
    }
}());
var _default = {
    extend: function(extender) {
        DataSourceAdapterTreeList = DataSourceAdapterTreeList.inherit(extender)
    },
    create: function(component) {
        return new DataSourceAdapterTreeList(component)
    }
};
exports["default"] = _default;
module.exports = exports.default;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.editing.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.editing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.editing.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

__webpack_require__(/*! ./ui.tree_list.editor_factory */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.editor_factory.js");
var _renderer = _interopRequireDefault(__webpack_require__(/*! ../../core/renderer */ "../../node_modules/devextreme/core/renderer.js"));
var _ui = _interopRequireDefault(__webpack_require__(/*! ../widget/ui.errors */ "../../node_modules/devextreme/ui/widget/ui.errors.js"));
var _type = __webpack_require__(/*! ../../core/utils/type */ "../../node_modules/devextreme/core/utils/type.js");
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _deferred = __webpack_require__(/*! ../../core/utils/deferred */ "../../node_modules/devextreme/core/utils/deferred.js");
var _message = _interopRequireDefault(__webpack_require__(/*! ../../localization/message */ "../../node_modules/devextreme/localization/message.js"));
var _uiTree_list2 = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.utils */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.utils.js"));
var _uiGrid_core2 = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.editing */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.editing.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var TREELIST_EXPAND_ICON_CONTAINER_CLASS = "dx-treelist-icon-container";
var SELECT_CHECKBOX_CLASS = "dx-select-checkbox";
var DATA_EDIT_DATA_INSERT_TYPE = "insert";
var EditingController = _uiGrid_core2.default.controllers.editing.inherit(function() {
    return {
        _generateNewItem: function(key) {
            var item = this.callBase(key);
            item.data = {
                key: key
            };
            item.children = [];
            item.level = 0;
            item.parentKey = this.option("rootValue");
            return item
        },
        _needInsertItem: function(change, changeType, items, item) {
            var parentKey = change.key.parentKey;
            if (void 0 !== parentKey && parentKey !== this.option("rootValue")) {
                var rowIndex = _uiGrid_core.default.getIndexByKey(parentKey, items);
                if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {
                    items.splice(rowIndex + 1, 0, item)
                }
                return false
            }
            return this.callBase.apply(this, arguments)
        },
        _isEditColumnVisible: function() {
            var result = this.callBase.apply(this, arguments);
            var editingOptions = this.option("editing");
            return result || editingOptions && editingOptions.allowAdding
        },
        _isDefaultButtonVisible: function(button, options) {
            var result = this.callBase.apply(this, arguments);
            var row = options.row;
            if ("add" === button.name) {
                return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow)
            }
            return result
        },
        _getEditingButtons: function(options) {
            var buttons = this.callBase.apply(this, arguments);
            if (!options.column.buttons) {
                buttons.unshift(this._getButtonConfig("add", options))
            }
            return buttons
        },
        _beforeSaveEditData: function(change) {
            var dataController = this._dataController;
            var result = this.callBase.apply(this, arguments);
            if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {
                var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();
                var key = null === store || void 0 === store ? void 0 : store.key();
                if (!(0, _type.isDefined)(key)) {
                    throw _ui.default.Error("E1045")
                }
            }
            return result
        },
        addRowByRowIndex: function(rowIndex) {
            var dataController = this.getController("data");
            var row = dataController.getVisibleRows()[rowIndex];
            return this.addRow(row ? row.key : void 0)
        },
        addRow: function(key) {
            var that = this;
            var callBase = that.callBase;
            var dataController = that.getController("data");
            if (void 0 !== key && !dataController.isRowExpanded(key)) {
                var deferred = new _deferred.Deferred;
                dataController.expandRow(key).done(function() {
                    setTimeout(function() {
                        callBase.call(that, key).done(deferred.resolve).fail(deferred.reject)
                    })
                }).fail(deferred.reject);
                return deferred.promise()
            }
            if (void 0 === key) {
                key = that.option("rootValue")
            }
            return callBase.call(that, key)
        },
        _initNewRow: function(options, parentKey) {
            var dataController = this.getController("data");
            var dataSourceAdapter = dataController.dataSource();
            var parentIdSetter = dataSourceAdapter.createParentIdSetter();
            parentIdSetter(options.data, parentKey);
            return this.callBase.apply(this, arguments)
        },
        allowAdding: function(options) {
            return this._allowEditAction("allowAdding", options)
        },
        _needToCloseEditableCell: function($targetElement) {
            return this.callBase.apply(this, arguments) || $targetElement.closest("." + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing()
        },
        getButtonLocalizationNames: function() {
            var names = this.callBase.apply(this);
            names.add = "dxTreeList-editingAddRowToNode";
            return names
        }
    }
}());
var originalRowClick = _uiGrid_core2.default.extenders.views.rowsView._rowClick;
var originalRowDblClick = _uiGrid_core2.default.extenders.views.rowsView._rowDblClick;
var validateClick = function(e) {
    var $targetElement = (0, _renderer.default)(e.event.target);
    var originalClickHandler = "dxdblclick" === e.event.type ? originalRowDblClick : originalRowClick;
    if ($targetElement.closest("." + SELECT_CHECKBOX_CLASS).length) {
        return false
    }
    return !needToCallOriginalClickHandler.call(this, e, originalClickHandler)
};

function needToCallOriginalClickHandler(e, originalClickHandler) {
    var $targetElement = (0, _renderer.default)(e.event.target);
    if (!$targetElement.closest("." + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {
        originalClickHandler.call(this, e);
        return true
    }
    return false
}
var RowsViewExtender = (0, _extend.extend)({}, _uiGrid_core2.default.extenders.views.rowsView, {
    _renderCellCommandContent: function($container, options) {
        var editingController = this._editingController;
        var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);
        var isEditing = options.isEditing || isEditRow;
        if (!isEditing) {
            return this.callBase.apply(this, arguments)
        }
        return false
    },
    _rowClick: function(e) {
        if (validateClick.call(this, e)) {
            this.callBase.apply(this, arguments)
        }
    },
    _rowDblClick: function(e) {
        if (validateClick.call(this, e)) {
            this.callBase.apply(this, arguments)
        }
    }
});
_uiTree_list2.default.registerModule("editing", {
    defaultOptions: function() {
        return (0, _extend.extend)(true, _uiGrid_core2.default.defaultOptions(), {
            editing: {
                texts: {
                    addRowToNode: _message.default.format("dxTreeList-editingAddRowToNode")
                }
            }
        })
    },
    controllers: {
        editing: EditingController
    },
    extenders: {
        controllers: (0, _extend.extend)(true, {}, _uiGrid_core2.default.extenders.controllers, {
            data: {
                changeRowExpand: function() {
                    this._editingController.refresh();
                    return this.callBase.apply(this, arguments)
                }
            }
        }),
        views: {
            rowsView: RowsViewExtender,
            headerPanel: _uiGrid_core2.default.extenders.views.headerPanel
        }
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.editor_factory.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.editor_factory.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.editor_factory.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.editor_factory */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.editor_factory.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("editorFactory", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.error_handling.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.error_handling.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.error_handling.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.error_handling */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.error_handling.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("errorHandling", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_builder.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_builder.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.filter_builder.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.filter_builder */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.filter_builder.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("filterBuilder", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_panel.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_panel.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.filter_panel.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.filter_panel */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.filter_panel.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("filterPanel", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_row.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_row.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.filter_row.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.filter_row */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.filter_row.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("filterRow", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_sync.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_sync.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.filter_sync.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.filter_sync */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.filter_sync.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("filterSync", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.focus.js":
/*!************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.focus.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.focus.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _deferred = __webpack_require__(/*! ../../core/utils/deferred */ "../../node_modules/devextreme/core/utils/deferred.js");
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.focus */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.focus.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function findIndex(items, callback) {
    var result = -1;
    items.forEach(function(node, index) {
        if (callback(node)) {
            result = index
        }
    });
    return result
}
_uiTree_list.default.registerModule("focus", (0, _extend.extend)(true, {}, _uiGrid_core.default, {
    extenders: {
        controllers: {
            data: {
                changeRowExpand: function(key) {
                    if (this.option("focusedRowEnabled") && this.isRowExpanded(key)) {
                        if (this._isFocusedRowInside(key)) {
                            this.option("focusedRowKey", key)
                        }
                    }
                    return this.callBase.apply(this, arguments)
                },
                _isFocusedRowInside: function(parentKey) {
                    var focusedRowKey = this.option("focusedRowKey");
                    var rowIndex = this.getRowIndexByKey(focusedRowKey);
                    var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];
                    var parent = focusedRow && focusedRow.node.parent;
                    while (parent) {
                        if (parent.key === parentKey) {
                            return true
                        }
                        parent = parent.parent
                    }
                    return false
                },
                getParentKey: function(key) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var node = that.getNodeByKey(key);
                    var d = new _deferred.Deferred;
                    if (node) {
                        d.resolve(node.parent ? node.parent.key : void 0)
                    } else {
                        dataSource.load({
                            filter: [dataSource.getKeyExpr(), "=", key]
                        }).done(function(items) {
                            var parentData = items[0];
                            if (parentData) {
                                d.resolve(dataSource.parentKeyOf(parentData))
                            } else {
                                d.reject()
                            }
                        }).fail(d.reject)
                    }
                    return d.promise()
                },
                expandAscendants: function(key) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var d = new _deferred.Deferred;
                    that.getParentKey(key).done(function(parentKey) {
                        if (dataSource && void 0 !== parentKey && parentKey !== that.option("rootValue")) {
                            dataSource._isNodesInitializing = true;
                            that.expandRow(parentKey);
                            dataSource._isNodesInitializing = false;
                            that.expandAscendants(parentKey).done(d.resolve).fail(d.reject)
                        } else {
                            d.resolve()
                        }
                    }).fail(d.reject);
                    return d.promise()
                },
                getPageIndexByKey: function(key) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var d = new _deferred.Deferred;
                    that.expandAscendants(key).done(function() {
                        dataSource.load({
                            parentIds: []
                        }).done(function(nodes) {
                            var offset = findIndex(nodes, function(node) {
                                return that.keyOf(node.data) === key
                            });
                            var pageIndex = -1;
                            if (offset >= 0) {
                                pageIndex = Math.floor(offset / that.pageSize())
                            }
                            d.resolve(pageIndex)
                        }).fail(d.reject)
                    }).fail(d.reject);
                    return d.promise()
                }
            }
        }
    }
}));


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.grid_view.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.grid_view.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.grid_view.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.grid_view */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.grid_view.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var GridView = _uiGrid_core.default.views.gridView.inherit(function() {
    return {
        _getWidgetAriaLabel: function() {
            return "dxTreeList-ariaTreeList"
        },
        _getTableRoleName: function() {
            return "treegrid"
        }
    }
}());
_uiTree_list.default.registerModule("gridView", {
    defaultOptions: _uiGrid_core.default.defaultOptions,
    controllers: _uiGrid_core.default.controllers,
    views: {
        gridView: GridView
    },
    extenders: {
        controllers: {
            resizing: {
                _toggleBestFitMode: function(isBestFit) {
                    this.callBase(isBestFit);
                    if (!this.option("legacyRendering")) {
                        var $rowsTable = this._rowsView.getTableElement();
                        $rowsTable.find(".dx-treelist-cell-expandable").toggleClass(this.addWidgetPrefix("best-fit"), isBestFit)
                    }
                }
            }
        }
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_filter.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_filter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.header_filter.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.header_filter */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.header_filter.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("headerFilter", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_panel.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_panel.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.header_panel.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.header_panel */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.header_panel.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("headerPanel", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.js":
/*!******************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports["default"] = void 0;
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.base */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.base.js"));
__webpack_require__(/*! ./ui.tree_list.state_storing */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.state_storing.js");
__webpack_require__(/*! ./ui.tree_list.column_chooser */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_chooser.js");
__webpack_require__(/*! ./ui.tree_list.master_detail */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.master_detail.js");
__webpack_require__(/*! ./ui.tree_list.editing */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.editing.js");
__webpack_require__(/*! ./ui.tree_list.validating */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.validating.js");
__webpack_require__(/*! ./ui.tree_list.virtual_scrolling */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_scrolling.js");
__webpack_require__(/*! ./ui.tree_list.filter_row */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_row.js");
__webpack_require__(/*! ./ui.tree_list.header_filter */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.header_filter.js");
__webpack_require__(/*! ./ui.tree_list.filter_sync */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_sync.js");
__webpack_require__(/*! ./ui.tree_list.filter_builder */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_builder.js");
__webpack_require__(/*! ./ui.tree_list.filter_panel */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.filter_panel.js");
__webpack_require__(/*! ./ui.tree_list.pager */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.pager.js");
__webpack_require__(/*! ./ui.tree_list.columns_resizing_reordering */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.columns_resizing_reordering.js");
__webpack_require__(/*! ./ui.tree_list.column_fixing */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.column_fixing.js");
__webpack_require__(/*! ./ui.tree_list.adaptivity */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.adaptivity.js");
__webpack_require__(/*! ./ui.tree_list.selection */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.selection.js");
__webpack_require__(/*! ./ui.tree_list.search */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.search.js");
__webpack_require__(/*! ./ui.tree_list.keyboard_navigation */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.keyboard_navigation.js");
__webpack_require__(/*! ./ui.tree_list.virtual_columns */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_columns.js");
__webpack_require__(/*! ./ui.tree_list.focus */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.focus.js");
__webpack_require__(/*! ./ui.tree_list.row_dragging */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.row_dragging.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var _default = _uiTree_list.default;
exports["default"] = _default;
module.exports = exports.default;


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.keyboard_navigation.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.keyboard_navigation.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.keyboard_navigation.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.keyboard_navigation */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.keyboard_navigation.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("keyboardNavigation", (0, _extend.extend)(true, {}, _uiGrid_core.default, {
    extenders: {
        controllers: {
            keyboardNavigation: {
                _leftRightKeysHandler: function(eventArgs, isEditing) {
                    var rowIndex = this.getVisibleRowIndex();
                    var dataController = this._dataController;
                    if (eventArgs.ctrl) {
                        var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);
                        var key = dataController.getKeyByRowIndex(rowIndex);
                        if ("nextInRow" === directionCode) {
                            dataController.expandRow(key)
                        } else {
                            dataController.collapseRow(key)
                        }
                    } else {
                        return this.callBase.apply(this, arguments)
                    }
                }
            }
        }
    }
}));


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.master_detail.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.master_detail.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.master_detail.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.master_detail */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.master_detail.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("masterDetail", (0, _extend.extend)(true, {}, _uiGrid_core.default, {
    extenders: {
        controllers: {
            data: {
                isRowExpanded: function() {
                    return this.callBase.apply(this, arguments)
                },
                _processItems: function() {
                    return this.callBase.apply(this, arguments)
                },
                _processDataItem: function() {
                    return this.callBase.apply(this, arguments)
                }
            }
        }
    }
}));


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.pager.js":
/*!************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.pager.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.pager.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.pager */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.pager.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("pager", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.row_dragging.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.row_dragging.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.row_dragging.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.row_dragging */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.row_dragging.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("rowDragging", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.rows.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.rows.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.rows.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

exports.RowsView = void 0;
var _renderer = _interopRequireDefault(__webpack_require__(/*! ../../core/renderer */ "../../node_modules/devextreme/core/renderer.js"));
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.rows */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.rows.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var TREELIST_TEXT_CONTENT = "dx-treelist-text-content";
var TREELIST_EXPAND_ICON_CONTAINER_CLASS = "dx-treelist-icon-container";
var TREELIST_CELL_EXPANDABLE_CLASS = "dx-treelist-cell-expandable";
var TREELIST_EMPTY_SPACE = "dx-treelist-empty-space";
var TREELIST_EXPANDED_CLASS = "dx-treelist-expanded";
var TREELIST_COLLAPSED_CLASS = "dx-treelist-collapsed";
var RowsView = _uiGrid_core.default.views.rowsView.inherit(function() {
    var createCellContent = function($container) {
        return (0, _renderer.default)("<div>").addClass(TREELIST_TEXT_CONTENT).appendTo($container)
    };
    var createIcon = function(hasIcon, isExpanded) {
        var $iconElement = (0, _renderer.default)("<div>").addClass(TREELIST_EMPTY_SPACE);
        if (hasIcon) {
            $iconElement.toggleClass(TREELIST_EXPANDED_CLASS, isExpanded).toggleClass(TREELIST_COLLAPSED_CLASS, !isExpanded).append((0, _renderer.default)("<span>"))
        }
        return $iconElement
    };
    return {
        _renderIconContainer: function($container, options) {
            var _this = this;
            var $iconContainer = (0, _renderer.default)("<div>").addClass(TREELIST_EXPAND_ICON_CONTAINER_CLASS).appendTo($container);
            options.watch && options.watch(function() {
                return [options.row.level, options.row.isExpanded, options.row.node.hasChildren]
            }, function() {
                $iconContainer.empty();
                _this._renderIcons($iconContainer, options)
            });
            $container.addClass(TREELIST_CELL_EXPANDABLE_CLASS);
            return this._renderIcons($iconContainer, options)
        },
        _renderIcons: function($iconContainer, options) {
            var row = options.row;
            var level = row.level;
            for (var i = 0; i <= level; i++) {
                $iconContainer.append(createIcon(i === level && row.node.hasChildren, row.isExpanded))
            }
            return $iconContainer
        },
        _renderCellCommandContent: function(container, model) {
            this._renderIconContainer(container, model);
            return true
        },
        _processTemplate: function(template, options) {
            var that = this;
            var resultTemplate;
            var renderingTemplate = this.callBase(template);
            var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();
            if (renderingTemplate && options.column.index === firstDataColumnIndex) {
                resultTemplate = {
                    render: function(options) {
                        var $container = options.container;
                        if (that._renderCellCommandContent($container, options.model)) {
                            options.container = createCellContent($container)
                        }
                        renderingTemplate.render(options)
                    }
                }
            } else {
                resultTemplate = renderingTemplate
            }
            return resultTemplate
        },
        _updateCell: function($cell, options) {
            $cell = $cell.hasClass(TREELIST_TEXT_CONTENT) ? $cell.parent() : $cell;
            this.callBase($cell, options)
        },
        _rowClick: function(e) {
            var dataController = this._dataController;
            var $targetElement = (0, _renderer.default)(e.event.target);
            var isExpandIcon = this.isExpandIcon($targetElement);
            var item = dataController && dataController.items()[e.rowIndex];
            if (isExpandIcon && item) {
                dataController.changeRowExpand(item.key)
            }
            this.callBase(e)
        },
        _createRow: function(row) {
            var node = row && row.node;
            var $rowElement = this.callBase.apply(this, arguments);
            if (node) {
                this.setAria("level", row.level, $rowElement);
                if (node.hasChildren) {
                    this.setAria("expanded", row.isExpanded, $rowElement)
                }
            }
            return $rowElement
        },
        isExpandIcon: function($targetElement) {
            return !!$targetElement.closest("." + TREELIST_EXPANDED_CLASS + ", ." + TREELIST_COLLAPSED_CLASS).length
        }
    }
}());
exports.RowsView = RowsView;
_uiTree_list.default.registerModule("rows", {
    defaultOptions: _uiGrid_core.default.defaultOptions,
    views: {
        rowsView: RowsView
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.search.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.search.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.search.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.search */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.search.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("search", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.selection.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.selection.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.selection.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _renderer = _interopRequireDefault(__webpack_require__(/*! ../../core/renderer */ "../../node_modules/devextreme/core/renderer.js"));
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _common = __webpack_require__(/*! ../../core/utils/common */ "../../node_modules/devextreme/core/utils/common.js");
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.selection */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.selection.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _type = __webpack_require__(/*! ../../core/utils/type */ "../../node_modules/devextreme/core/utils/type.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var TREELIST_SELECT_ALL_CLASS = "dx-treelist-select-all";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var SELECT_CHECKBOX_CLASS = "dx-select-checkbox";
var originalRowClick = _uiGrid_core.default.extenders.views.rowsView._rowClick;
var originalHandleDataChanged = _uiGrid_core.default.extenders.controllers.data._handleDataChanged;
var nodeExists = function(array, currentKey) {
    return !!array.filter(function(key) {
        return key === currentKey
    }).length
};
_uiTree_list.default.registerModule("selection", (0, _extend.extend)(true, {}, _uiGrid_core.default, {
    defaultOptions: function() {
        return (0, _extend.extend)(true, _uiGrid_core.default.defaultOptions(), {
            selection: {
                showCheckBoxesMode: "always",
                recursive: false
            }
        })
    },
    extenders: {
        controllers: {
            data: {
                _handleDataChanged: function(e) {
                    var selectionController = this.getController("selection");
                    var isRecursiveSelection = selectionController.isRecursiveSelection();
                    if (isRecursiveSelection && (!e || "updateSelectionState" !== e.changeType)) {
                        selectionController.updateSelectionState({
                            selectedItemKeys: this.option("selectedRowKeys")
                        })
                    }
                    originalHandleDataChanged.apply(this, arguments)
                },
                loadDescendants: function() {
                    var that = this;
                    var d = that.callBase.apply(that, arguments);
                    var selectionController = that.getController("selection");
                    var isRecursiveSelection = selectionController.isRecursiveSelection();
                    if (isRecursiveSelection) {
                        d.done(function() {
                            selectionController.updateSelectionState({
                                selectedItemKeys: that.option("selectedRowKeys")
                            })
                        })
                    }
                    return d
                }
            },
            selection: {
                init: function() {
                    this.callBase.apply(this, arguments);
                    this._selectionStateByKey = {}
                },
                _getSelectionConfig: function() {
                    var _arguments = arguments,
                        _this = this;
                    var config = this.callBase.apply(this, arguments);
                    var plainItems = config.plainItems;
                    config.plainItems = function(all) {
                        if (all) {
                            return _this._dataController.getCachedStoreData() || []
                        }
                        return plainItems.apply(_this, _arguments).map(function(item) {
                            return item.data
                        })
                    };
                    config.isItemSelected = function(item) {
                        var key = _this._dataController.keyOf(item);
                        return _this.isRowSelected(key)
                    };
                    config.isSelectableItem = function() {
                        return true
                    };
                    config.getItemData = function(item) {
                        return item
                    };
                    return config
                },
                renderSelectCheckBoxContainer: function($container, model) {
                    var that = this;
                    var rowsView = that.component.getView("rowsView");
                    $container.addClass(CELL_FOCUS_DISABLED_CLASS);
                    var $checkbox = rowsView._renderSelectCheckBox($container, {
                        value: model.row.isSelected,
                        row: model.row,
                        column: model.column
                    });
                    rowsView._attachCheckBoxClickEvent($checkbox)
                },
                _updateSelectColumn: _common.noop,
                _getSelectAllNodeKeys: function() {
                    var component = this.component;
                    var root = component.getRootNode();
                    var cache = {};
                    var keys = [];
                    var isRecursiveSelection = this.isRecursiveSelection();
                    root && _uiTree_list.default.foreachNodes(root.children, function(node) {
                        if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {
                            keys.push(node.key)
                        }
                        if (!node.visible) {
                            return true
                        }
                        return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache)
                    });
                    return keys
                },
                isSelectAll: function() {
                    var selectedRowKeys = this.option("selectedRowKeys") || [];
                    if (0 === selectedRowKeys.length) {
                        return false
                    }
                    var component = this.component;
                    var visibleKeys = this._getSelectAllNodeKeys();
                    var isRecursiveSelection = this.isRecursiveSelection();
                    var hasIndeterminateState = false;
                    var selectedVisibleKeys = visibleKeys.filter(function(key) {
                        var isRowSelected = component.isRowSelected(key, isRecursiveSelection);
                        if (void 0 === isRowSelected) {
                            hasIndeterminateState = true
                        }
                        return isRowSelected
                    });
                    if (!selectedVisibleKeys.length) {
                        return hasIndeterminateState ? void 0 : false
                    } else {
                        if (selectedVisibleKeys.length === visibleKeys.length) {
                            return true
                        }
                    }
                },
                selectAll: function() {
                    var _this2 = this;
                    var visibleKeys = this._getSelectAllNodeKeys().filter(function(key) {
                        return !_this2.isRowSelected(key)
                    });
                    this.focusedItemIndex(-1);
                    return this.selectRows(visibleKeys, true)
                },
                deselectAll: function() {
                    var visibleKeys = this._getSelectAllNodeKeys();
                    this.focusedItemIndex(-1);
                    return this.deselectRows(visibleKeys)
                },
                selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {
                    var that = this;
                    var selectedRowKeys = that.option("selectedRowKeys");
                    var isRecursiveSelection = this.isRecursiveSelection();
                    var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({
                        keys: (0, _type.isDefined)(value) ? value : []
                    }, preserve, !isDeselect);
                    if (normalizedArgs && !(0, _common.equalByValue)(normalizedArgs.selectedRowKeys, selectedRowKeys)) {
                        that._isSelectionNormalizing = true;
                        return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always(function() {
                            that._isSelectionNormalizing = false
                        }).done(function(items) {
                            normalizedArgs.selectedRowsData = items;
                            that._fireSelectionChanged(normalizedArgs)
                        })
                    }
                    return this.callBase(value, preserve, isDeselect, isSelectAll)
                },
                changeItemSelection: function(itemIndex, keyboardKeys) {
                    var isRecursiveSelection = this.isRecursiveSelection();
                    if (isRecursiveSelection && !keyboardKeys.shift) {
                        var key = this._dataController.getKeyByRowIndex(itemIndex);
                        return this.selectedItemKeys(key, true, this.isRowSelected(key))
                    }
                    return this.callBase.apply(this, arguments)
                },
                _updateParentSelectionState: function(node, isSelected) {
                    var that = this;
                    var state = isSelected;
                    var parentNode = node.parent;
                    if (parentNode) {
                        if (parentNode.children.length > 1) {
                            if (false === isSelected) {
                                var hasSelectedState = parentNode.children.some(function(childNode, index, children) {
                                    return that._selectionStateByKey[childNode.key]
                                });
                                state = hasSelectedState ? void 0 : false
                            } else {
                                if (true === isSelected) {
                                    var hasNonSelectedState = parentNode.children.some(function(childNode) {
                                        return !that._selectionStateByKey[childNode.key]
                                    });
                                    state = hasNonSelectedState ? void 0 : true
                                }
                            }
                        }
                        this._selectionStateByKey[parentNode.key] = state;
                        if (parentNode.parent && parentNode.parent.level >= 0) {
                            this._updateParentSelectionState(parentNode, state)
                        }
                    }
                },
                _updateChildrenSelectionState: function(node, isSelected) {
                    var that = this;
                    var children = node.children;
                    children && children.forEach(function(childNode) {
                        that._selectionStateByKey[childNode.key] = isSelected;
                        if (childNode.children.length > 0) {
                            that._updateChildrenSelectionState(childNode, isSelected)
                        }
                    })
                },
                _updateSelectionStateCore: function(keys, isSelected) {
                    var dataController = this._dataController;
                    for (var i = 0; i < keys.length; i++) {
                        this._selectionStateByKey[keys[i]] = isSelected;
                        var node = dataController.getNodeByKey(keys[i]);
                        if (node) {
                            this._updateParentSelectionState(node, isSelected);
                            this._updateChildrenSelectionState(node, isSelected)
                        }
                    }
                },
                _getSelectedParentKeys: function(key, selectedItemKeys, useCash) {
                    var selectedParentNode;
                    var node = this._dataController.getNodeByKey(key);
                    var parentNode = node && node.parent;
                    var result = [];
                    while (parentNode && parentNode.level >= 0) {
                        result.unshift(parentNode.key);
                        var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;
                        if (isSelected) {
                            selectedParentNode = parentNode;
                            result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);
                            break
                        } else {
                            if (useCash) {
                                break
                            }
                        }
                        parentNode = parentNode.parent
                    }
                    return selectedParentNode && result || []
                },
                _getSelectedChildKeys: function(key, keysToIgnore) {
                    var _this3 = this;
                    var childKeys = [];
                    var node = this._dataController.getNodeByKey(key);
                    node && _uiTree_list.default.foreachNodes(node.children, function(childNode) {
                        var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);
                        if (ignoreKeyIndex < 0) {
                            childKeys.push(childNode.key)
                        }
                        return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === _this3._selectionStateByKey[childNode.key]
                    });
                    return childKeys
                },
                _normalizeParentKeys: function(key, args) {
                    var that = this;
                    var keysToIgnore = [key];
                    var parentNodeKeys = that._getSelectedParentKeys(key, args.selectedRowKeys);
                    if (parentNodeKeys.length) {
                        keysToIgnore = keysToIgnore.concat(parentNodeKeys);
                        keysToIgnore.forEach(function(key) {
                            var index = args.selectedRowKeys.indexOf(key);
                            if (index >= 0) {
                                args.selectedRowKeys.splice(index, 1)
                            }
                        });
                        var childKeys = that._getSelectedChildKeys(parentNodeKeys[0], keysToIgnore);
                        args.selectedRowKeys = args.selectedRowKeys.concat(childKeys)
                    }
                },
                _normalizeChildrenKeys: function(key, args) {
                    var _this4 = this;
                    var node = this._dataController.getNodeByKey(key);
                    node && node.children.forEach(function(childNode) {
                        var index = args.selectedRowKeys.indexOf(childNode.key);
                        if (index >= 0) {
                            args.selectedRowKeys.splice(index, 1)
                        }
                        _this4._normalizeChildrenKeys(childNode.key, args)
                    })
                },
                _normalizeSelectedRowKeysCore: function(keys, args, preserve, isSelect) {
                    var that = this;
                    keys.forEach(function(key) {
                        if (preserve && that.isRowSelected(key) === isSelect) {
                            return
                        }
                        that._normalizeChildrenKeys(key, args);
                        var index = args.selectedRowKeys.indexOf(key);
                        if (isSelect) {
                            if (index < 0) {
                                args.selectedRowKeys.push(key)
                            }
                            args.currentSelectedRowKeys.push(key)
                        } else {
                            if (index >= 0) {
                                args.selectedRowKeys.splice(index, 1)
                            }
                            args.currentDeselectedRowKeys.push(key);
                            that._normalizeParentKeys(key, args)
                        }
                    })
                },
                _normalizeSelectionArgs: function(args, preserve, isSelect) {
                    var result;
                    var keys = Array.isArray(args.keys) ? args.keys : [args.keys];
                    var selectedRowKeys = this.option("selectedRowKeys") || [];
                    if (keys.length) {
                        result = {
                            currentSelectedRowKeys: [],
                            currentDeselectedRowKeys: [],
                            selectedRowKeys: preserve ? selectedRowKeys.slice(0) : []
                        };
                        this._normalizeSelectedRowKeysCore(keys, result, preserve, isSelect)
                    }
                    return result
                },
                _updateSelectedItems: function(args) {
                    this.updateSelectionState(args);
                    this.callBase(args)
                },
                _fireSelectionChanged: function() {
                    if (!this._isSelectionNormalizing) {
                        this.callBase.apply(this, arguments)
                    }
                },
                _isModeLeavesOnly: function(mode) {
                    return "leavesOnly" === mode
                },
                _removeDuplicatedKeys: function(keys) {
                    var result = [];
                    var processedKeys = {};
                    keys.forEach(function(key) {
                        if (!processedKeys[key]) {
                            processedKeys[key] = true;
                            result.push(key)
                        }
                    });
                    return result
                },
                _getAllChildKeys: function(key) {
                    var childKeys = [];
                    var node = this._dataController.getNodeByKey(key);
                    node && _uiTree_list.default.foreachNodes(node.children, function(childNode) {
                        childKeys.push(childNode.key)
                    }, true);
                    return childKeys
                },
                _getAllSelectedRowKeys: function(keys) {
                    var _this5 = this;
                    var result = [];
                    keys.forEach(function(key) {
                        var parentKeys = _this5._getSelectedParentKeys(key, [], true);
                        var childKeys = _this5._getAllChildKeys(key);
                        result.push.apply(result, parentKeys.concat([key], childKeys))
                    });
                    result = this._removeDuplicatedKeys(result);
                    return result
                },
                _getParentSelectedRowKeys: function(keys) {
                    var that = this;
                    var result = [];
                    keys.forEach(function(key) {
                        var parentKeys = that._getSelectedParentKeys(key, keys);
                        !parentKeys.length && result.push(key)
                    });
                    return result
                },
                _getLeafSelectedRowKeys: function(keys) {
                    var that = this;
                    var result = [];
                    var dataController = that._dataController;
                    keys.forEach(function(key) {
                        var node = dataController.getNodeByKey(key);
                        node && !node.hasChildren && result.push(key)
                    });
                    return result
                },
                isRecursiveSelection: function() {
                    var selectionMode = this.option("selection.mode");
                    var isRecursive = this.option("selection.recursive");
                    return "multiple" === selectionMode && isRecursive
                },
                updateSelectionState: function(options) {
                    var removedItemKeys = options.removedItemKeys || [];
                    var selectedItemKeys = options.selectedItemKeys || [];
                    if (this.isRecursiveSelection()) {
                        this._updateSelectionStateCore(removedItemKeys, false);
                        this._updateSelectionStateCore(selectedItemKeys, true)
                    }
                },
                isRowSelected: function(key, isRecursiveSelection) {
                    var _isRecursiveSelection;
                    var result = this.callBase.apply(this, arguments);
                    isRecursiveSelection = null !== (_isRecursiveSelection = isRecursiveSelection) && void 0 !== _isRecursiveSelection ? _isRecursiveSelection : this.isRecursiveSelection();
                    if (!result && isRecursiveSelection) {
                        if (key in this._selectionStateByKey) {
                            return this._selectionStateByKey[key]
                        }
                        return false
                    }
                    return result
                },
                getSelectedRowKeys: function(mode) {
                    var that = this;
                    if (!that._dataController) {
                        return []
                    }
                    var selectedRowKeys = that.callBase.apply(that, arguments);
                    if (mode) {
                        if (this.isRecursiveSelection()) {
                            selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys)
                        }
                        if ("all" !== mode) {
                            if ("excludeRecursive" === mode) {
                                selectedRowKeys = that._getParentSelectedRowKeys(selectedRowKeys)
                            } else {
                                if (that._isModeLeavesOnly(mode)) {
                                    selectedRowKeys = that._getLeafSelectedRowKeys(selectedRowKeys)
                                }
                            }
                        }
                    }
                    return selectedRowKeys
                },
                getSelectedRowsData: function(mode) {
                    var that = this;
                    var dataController = that._dataController;
                    var selectedKeys = this.getSelectedRowKeys(mode) || [];
                    var selectedRowsData = [];
                    selectedKeys.forEach(function(key) {
                        var node = dataController.getNodeByKey(key);
                        node && selectedRowsData.push(node.data)
                    });
                    return selectedRowsData
                },
                refresh: function() {
                    this._selectionStateByKey = {};
                    return this.callBase.apply(this, arguments)
                }
            }
        },
        views: {
            columnHeadersView: {
                _processTemplate: function(template, options) {
                    var that = this;
                    var resultTemplate;
                    var renderingTemplate = this.callBase(template, options);
                    var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();
                    if (renderingTemplate && "header" === options.rowType && options.column.index === firstDataColumnIndex) {
                        resultTemplate = {
                            render: function(options) {
                                if ("multiple" === that.option("selection.mode")) {
                                    that.renderSelectAll(options.container, options.model)
                                }
                                renderingTemplate.render(options)
                            }
                        }
                    } else {
                        resultTemplate = renderingTemplate
                    }
                    return resultTemplate
                },
                renderSelectAll: function($cell, options) {
                    $cell.addClass(TREELIST_SELECT_ALL_CLASS);
                    this._renderSelectAllCheckBox($cell)
                },
                _isSortableElement: function($target) {
                    return this.callBase($target) && !$target.closest("." + SELECT_CHECKBOX_CLASS).length
                }
            },
            rowsView: {
                _renderIcons: function($iconContainer, options) {
                    this.callBase.apply(this, arguments);
                    if (!options.row.isNewRow && "multiple" === this.option("selection.mode")) {
                        this.getController("selection").renderSelectCheckBoxContainer($iconContainer, options)
                    }
                    return $iconContainer
                },
                _rowClick: function(e) {
                    var $targetElement = (0, _renderer.default)(e.event.target);
                    if (this.isExpandIcon($targetElement)) {
                        this.callBase.apply(this, arguments)
                    } else {
                        originalRowClick.apply(this, arguments)
                    }
                }
            }
        }
    }
}));


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.sorting.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.sorting.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.sorting.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.sorting */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.sorting.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("sorting", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.state_storing.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.state_storing.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.state_storing.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.state_storing */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.state_storing.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var origApplyState = _uiGrid_core.default.extenders.controllers.stateStoring.applyState;
_uiTree_list.default.registerModule("stateStoring", (0, _extend.extend)(true, {}, _uiGrid_core.default, {
    extenders: {
        controllers: {
            stateStoring: {
                applyState: function(state) {
                    origApplyState.apply(this, arguments);
                    if (Object.prototype.hasOwnProperty.call(state, "expandedRowKeys")) {
                        this.option("expandedRowKeys", state.expandedRowKeys && state.expandedRowKeys.slice())
                    }
                }
            },
            data: {
                getUserState: function() {
                    var state = this.callBase.apply(this, arguments);
                    if (!this.option("autoExpandAll")) {
                        state.expandedRowKeys = this.option("expandedRowKeys")
                    }
                    return state
                }
            }
        }
    }
}));


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.validating.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.validating.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.validating.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");
var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.validating */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.validating.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var EditingControllerExtender = (0, _extend.extend)({}, _uiGrid_core.default.extenders.controllers.editing);
delete EditingControllerExtender.processItems;
delete EditingControllerExtender.processDataItem;
_uiTree_list.default.registerModule("validating", {
    defaultOptions: _uiGrid_core.default.defaultOptions,
    controllers: _uiGrid_core.default.controllers,
    extenders: {
        controllers: {
            editing: EditingControllerExtender,
            editorFactory: _uiGrid_core.default.extenders.controllers.editorFactory
        },
        views: _uiGrid_core.default.extenders.views
    }
});


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_columns.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_columns.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.virtual_columns.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.virtual_columns */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.virtual_columns.js"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
_uiTree_list.default.registerModule("virtualColumns", _uiGrid_core.default);


/***/ }),

/***/ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_scrolling.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/devextreme/ui/tree_list/ui.tree_list.virtual_scrolling.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/**
 * DevExtreme (ui/tree_list/ui.tree_list.virtual_scrolling.js)
 * Version: 20.2.11
 * Build date: Wed Apr 27 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var _uiTree_list = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.core */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.core.js"));
var _uiTree_list2 = _interopRequireDefault(__webpack_require__(/*! ./ui.tree_list.data_source_adapter */ "../../node_modules/devextreme/ui/tree_list/ui.tree_list.data_source_adapter.js"));
var _uiGrid_core = _interopRequireDefault(__webpack_require__(/*! ../grid_core/ui.grid_core.virtual_scrolling */ "../../node_modules/devextreme/ui/grid_core/ui.grid_core.virtual_scrolling.js"));
var _extend = __webpack_require__(/*! ../../core/utils/extend */ "../../node_modules/devextreme/core/utils/extend.js");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}
var oldDefaultOptions = _uiGrid_core.default.defaultOptions;
var originalDataControllerExtender = _uiGrid_core.default.extenders.controllers.data;
var originalDataSourceAdapterExtender = _uiGrid_core.default.extenders.dataSourceAdapter;
_uiGrid_core.default.extenders.controllers.data = (0, _extend.extend)({}, originalDataControllerExtender, {
    _loadOnOptionChange: function() {
        var virtualScrollController = this._dataSource && this._dataSource._virtualScrollController;
        virtualScrollController && virtualScrollController.reset();
        this.callBase()
    }
});
_uiGrid_core.default.extenders.dataSourceAdapter = (0, _extend.extend)({}, originalDataSourceAdapterExtender, {
    changeRowExpand: function() {
        var _this = this;
        return this.callBase.apply(this, arguments).done(function() {
            var viewportItemIndex = _this.getViewportItemIndex();
            viewportItemIndex >= 0 && _this.setViewportItemIndex(viewportItemIndex)
        })
    }
});
_uiTree_list.default.registerModule("virtualScrolling", (0, _extend.extend)({}, _uiGrid_core.default, {
    defaultOptions: function() {
        return (0, _extend.extend)(true, oldDefaultOptions(), {
            scrolling: {
                mode: "virtual"
            }
        })
    }
}));
_uiTree_list2.default.extend(_uiGrid_core.default.extenders.dataSourceAdapter);


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_devextreme-vue_tree-list_js.js.map